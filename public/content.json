{"pages":[{"title":"About","date":"2018-12-25T02:22:42.280Z","path":"about/index.html","text":""},{"title":"Categories","date":"2018-12-25T02:22:42.303Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2018-12-25T02:22:42.311Z","path":"tags/index.html","text":""}],"posts":[{"title":"Hello World","date":"2018-12-25T02:19:10.974Z","path":"wiki/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]},{"title":"正则表达式使用案例","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/100-regexp-demos/","text":"隐藏手机号码中间 4 位数字： 前三位数字：^(\\d{3}) 中间 4 位数字：\\d{4} 最后 4 位数字：(\\d{4})$ 子表达式：() 中的内容是一个子表达式，$1 表示第一个子表达式，$2 表示第二个子表达式，依次类推。 123var str = '18012345678'var newStr = str.replace(/^(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)$/, '$1****$2')console.log(newStr) // 180****5678 判断字符串是否为数字要考虑的问题： 数字有正负 数字有整数和小数之分 特殊数字 0 进一步分析： 正负：以 - 开头为负数，直接以数字开头为正数，因此可以确定正则开头部分为 /^-?/； 整数：整数的第一位应当是大于 0 的数字，如果是多位整数，则后面几位数字范围是 0-9 ，对应的正则为 /[1-9][0-9]*$/ 小数：小数有整数部分和小数部分，通过小数点 . 分隔开。通过上面分析，整数部分应该是 /[1-9][0-9]*/ 。而小数点需转义为 /\\./ 。小数部分可以全为 0 ，如 10.00 ，因此小数部分无需过多限制，对应的正则为 /[0-9]+/ 。 0：对应的正则是 /0/ 。 整数、小数、0 三种情况的逻辑关系为“或”，因此需要将他们使用 | 连接合并起来: 1var regNum = /(^-?[1-9][0-9]*$)|(^-?[1-9][0-9]*\\.[0-9]+)|(^-?0$)/ 另外，元字符 \\d 等价于 [0-9]，上面正则也可以写成这样： 1var regNum = /(^-?[1-9]\\d*$)|(^-?[1-9]\\d*\\.\\d+)|(^-?0$)/ 取出指定字符有这样一个字符串，穿插着“【男播】”、“【女播】”、“【正文】”、“同期声”、“【CLIP】”五个随机出现的词组，现在需要对这个字符串进行一些操作。 提取“【男播】”与下一个相邻词组之间的内容： 123456789var str = \"【男播】aaa【男播】bbb【女播】ccc【正文】ddd【同期声】ccc【CLIP】ddd【男播】eee【女播】fff【男播】ggg\";var reg = /男播】([^【]*)【|男播】([^【]*)$/gi;var arr = [];str.replace(reg, function (match, $1, $2) &#123; $1 ? arr.push($1) : ''; $2 ? arr.push($2) : '';&#125;)var result = arr.join(' ');console.log(result);","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"Array.prototype.concat()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/01-Array.concat/","text":"描述方法 concat() 将创建并返回一个新数组，这个方法将所有参数都添加到新数组中。它并不修改原数组 。如果要进行 concat() 操作的参数是一个数组，那么添加的是数组中的元素，而不是数组。 参数 参数 描述 valueX 必需。可以使具体的值，也可以是数组对象，可以是任意多个。 返回值一个新数组 示例 参数为具体的值 123var arr = [ 1, 2 ];arr.concat(4, 5); // [ 1, 2, 4, 5 ] 参数为数组对象 123var arr = [ 1, 2 ];arr.concat([4, 5]); // [ 1, 2, 4, 5 ] 多个参数 123var arr = [ 1, 2 ];arr.concat([4, 5], [6, 7]); // [ 1, 2, 4, 5, 6, 7 ] 参数为数组对象，且元素也为数组对象 123var arr = [ 1, 2 ];arr.concat(4, [ 5, [ 6, 7] ]); // [ 1, 2, 4, 5, [ 6, 7 ] ] 模拟实现12345678910111213141516171819/** 模拟原生 Array.concat()*/Array.prototype.concat = function () &#123; var args = arguments; var arr = this; for ( var i = 0; i &lt; args.length; i++ ) &#123; var item = args[i]; if ( item instanceof Array ) &#123; for( var j = 0; j &lt; item.length; j++ ) &#123; arr.push( item[j] ) &#125; &#125; else &#123; arr.push( item ); &#125; &#125; return arr;&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.push()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/03-Array.push/","text":"描述将一个或多个元素添加到数组的末尾，并返回新数组的长度（对原数组进行修改） 参数 参数 描述 elementN 必需，个数为至少一个。被添加到数组末尾的元素。 返回值新的 length 属性值。 示例1234var arr = [ 1, 2, 3 ];var newLength1 = arr.push(4); // 4var newLength2 = arr.push(5, 6); // 6","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.pop()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/04-Array.pop/","text":"描述从一个数组中删除并返回最后一个元素。（修改原数组） 参数无 返回值从数组中删除的元素（当数组为空时返回 undefined） 示例12345var arr = [ 1, 2, 3 ];var delEle= arr.pop(); // 3 [].pop(); // undefined","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.slice()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/07-Array.slice/","text":"描述不修改原数组，只返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝： 如果该元素是个对象引用（不是实际的对象）， slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。 对于字符串、数字和布尔值来说（不是 String、Number 和 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或者数字或者布尔值，将不会影响另一个数组。 如果向两个数组中任一一个数组中添加了新元素，则另一个不会受到影响。 参数begin（可选）从该索引处开始提取原数组中的元素。如果该参数为负数，则表示从原数组中的倒数第几个开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。如果省略 begin ，则 slice 从索引 0 开始。 end （可选）在该索引处结束提取原数组元素，slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end） slice(1, 4) 提取原数组中的第二个元素开始知道第四个元素的所有元素（索引为 1,2,3 的元素） 如果该参数为负数，则它表示在原数组中的倒数第几个元素结束抽取。slice(-2, -1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。 如果 end 被省略，则 slice 会一直提取到原数组末尾。 如果 end 大于数组长度， slice 也会一直提取到原数组末尾。 返回值一个含有提取元素的新数组 示例 省略 begin 和 end 12345678var arr = [ 1, 2, 3 ];var newArr = arr.slice(); // [ 1, 2, 3 ]arr.push( 4 );console.log( arr ); // [ 1, 2, 3, 4 ]console.log( newArr ); // [ 1, 2, 3 ] //TODO…","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.shift()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/05-Array.shift/","text":"描述从一个数组中删除并返回第一个元素。（修改原数组） 参数无 返回值从数组中删除的元素（当数组为空时返回 undefined） 示例12345var arr = [ 1, 2, 3 ];var delEle = arr.shift(); // 1 [].shift(); // undefined","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.unshift()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/06-Array.unshift/","text":"描述将一个或多个元素添加到数组的开头，并返回新数组的长度。（修改原数组） 参数 参数 描述 elementN 必需，个数为至少一个。要添加到数组开头的元素 返回值从数组中删除的元素（当数组为空时返回 undefined） 示例123456789101112[].unshift(); // undefinedvar arr = [ 1, 2, 3 ];var newLength1 = arr.unshift(4); // 4 console.log( arr ); // [ 4, 1, 2, 3 ]var newLength2 = arr.unshift(5, 6); // 6 console.log( arr ); // [ 5, 6, 4, 1, 2, 3 ]var newLength3 = arr.unshift([7, 8]); // 7console.log( arr ); // [ [7, 8], 5, 6, 4, 1, 2, 3 ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.splice()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/08-Array.splice/","text":"描述通过删除现有元素或者添加新元素来更改一个数组的内容 参数start指定修改的开始位置。如果超出了数组的长度，则从数组末尾开始添加内容，如果是负值，则表示从数组末位开始的第几位。 若只使用 start 参数而不使用 deleteCount、item，如：array.splice(start)，表示删除 [start, end] 的元素。 deleteCount （可选）表示要移除的数组的元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应该添加一个新元素。如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素豆浆被删除（含第 start 位）。 如果 deleteCount 被省略，则相当于 arr.lengtrh-start。 item1, item2, ... （可选）要添加进数组的元素，从 start 位置开始，如果不指定，则 splice 将只删除数组元素。 返回值由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含了一个元素的数组，如果没有删除元素，则返回空数组。 示例 只有 start 12345var arr = [ 1, 2, 3 ];arr.splice(2); // [ 3 ]console.log(arr); // [ 1, 2 ] deleteCount 为 0 12345var arr = [ 1, 2, 3 ];arr.splice(1, 0); // []console.log(arr); // [ 1, 2, 3 ] deleteCount 大于 start 之后元素的总和 12345var arr = [ 1, 2, 3, 4 ];arr.splice(1, 4); // [ 2, 3, 4 ]console.log(arr); // [ 1 ] item 12345var arr = [ 1, 2, 3 ];arr.splice(1, 2, 4, 5); // [ 2, 3 ]console.log(arr); // [ 1, 4, 5 ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.reverse()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/09-Array.reverse/","text":"描述reverse() 方法用于颠倒数组中元素的顺序。（修改原数组） 参数无 返回值返回颠倒顺序后的数组。 示例123var numbers = [1, 2, 3, 4];numbers.reverse();console.log(numbers); // [4, 3, 2, 1]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.sort()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/10-Array.sort/","text":"描述对数组的元素进行排序，并返回数组，默认排序顺序是根据字符串 Unicode 码点。（修改原数组） 为了实现排序，sort() 方法会调用每个数组项的 toString() 方法，然后比较得到的字符串，以确定如何排序。 另外，sort() 可以接受一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。 参数 参数 描述 compareFunction function 类型，可选。用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为字符串的各个字符的 Unicode 位点进行排序 返回值返回排序后的数组，原数组已经被排序后的数组代替。 示例一维数组排序 不指定排序方法 1234var scores = [1, 10, 21, 2];scores.sort();console.log(scores); // [ 1, 10, 2, 21 ]// 10 在 2 之前，这是因为在 Unicode 指针顺序中\"10\"在\"2\"之前 升序 1234567var numbers = [4, 2, 5, 1, 3];numbers.sort(function(a, b) &#123; return a - b;&#125;);console.log(numbers); // [ 1, 2, 3, 4, 5 ] 降序 1234567var numbers = [4, 2, 5, 1, 3];numbers.sort(function(a, b) &#123; return b - a;&#125;);console.log(numbers); // [ 1, 2, 3, 4, 5 ] 二维数组排序数组元素为对象，按照对象某个属性对其排序 按照 sortNo 属性从小到大排序：123456789101112131415161718192021222324252627var arr= [ &#123; 'sortNo': 2&#125;, &#123; 'sortNo': 1&#125;, &#123; 'sortNo': 5&#125;, &#123; 'sortNo': 6&#125;, &#123; 'sortNo': 7&#125;, &#123; 'sortNo': 3&#125;, &#123; 'sortNo': 9&#125;, &#123; 'sortNo': 4&#125;, &#123; 'sortNo': 0&#125;];arr.sort(function(a, b)&#123; return a.sortNo - b.sortNo;&#125;);console.log(arr);//输出结果//&#123; 'sortNo': 0&#125;//&#123; 'sortNo': 1&#125;//&#123; 'sortNo': 2&#125;//&#123; 'sortNo': 3&#125;//&#123; 'sortNo': 4&#125;//&#123; 'sortNo': 5&#125;//&#123; 'sortNo': 6&#125;//&#123; 'sortNo': 7&#125;//&#123; 'sortNo': 9&#125; 多条件排序按照 sortNo 属性从小到大排序，如果 sortNo 相同，则按照 sortNo2 从大到小排序： 12345678910111213141516171819202122232425262728293031323334353637var arr= [ &#123; 'sortNo': 2, 'sortNo2': 3&#125;, &#123; 'sortNo': 1, 'sortNo2': 3&#125;, &#123; 'sortNo': 5, 'sortNo2': 3&#125;, &#123; 'sortNo': 6, 'sortNo2': 3&#125;, &#123; 'sortNo': 7, 'sortNo2': 3&#125;, &#123; 'sortNo': 3, 'sortNo2': 4&#125;, &#123; 'sortNo': 3, 'sortNo2': 2&#125;, &#123; 'sortNo': 3, 'sortNo2': 1&#125;, &#123; 'sortNo': 3, 'sortNo2': 3&#125;, &#123; 'sortNo': 8, 'sortNo2': 3&#125;, &#123; 'sortNo': 4, 'sortNo2': 1&#125;, &#123; 'sortNo': 4, 'sortNo2': 2&#125;];arr.sort(function( a, b ) &#123; if (a.sortNo == b.sortNo) &#123; return b.sortNo2 - a.sortNo2; &#125; return a.sortNo - b.sortNo&#125;);console.log(arr);// [// &#123;sortNo: 1, sortNo2: 3&#125;// &#123;sortNo: 2, sortNo2: 3&#125;// &#123;sortNo: 3, sortNo2: 4&#125;// &#123;sortNo: 3, sortNo2: 3&#125;// &#123;sortNo: 3, sortNo2: 2&#125;// &#123;sortNo: 3, sortNo2: 1&#125;// &#123;sortNo: 4, sortNo2: 2&#125;// &#123;sortNo: 4, sortNo2: 1&#125;// &#123;sortNo: 5, sortNo2: 3&#125;// &#123;sortNo: 6, sortNo2: 3&#125;// &#123;sortNo: 7, sortNo2: 3&#125;// &#123;sortNo: 8, sortNo2: 3&#125;// ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.forEach()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/01-Array.forEach/","text":"描述forEach() 方法对数组每一项运行给定函数 fn，无返回值。另外，还可以指定函数 fn 的上下文环境（this）。 参数 参数 描述 fn function 类型，必需。数组中每个元素需要调用的函数 context 可选。执行回调时的上下文（this） fn 函数支持 3 个参数，依次是： 遍历的数组元素 对应的元素索引 数组本身 返回值无 示例打印 fn 的参数123456789var arr = [ 'a', 'b', 'c' ];arr.forEach(function(value, index, array) &#123; console.log( value, index, array )&#125;);// a 0 [\"a\", \"b\", \"c\"]// b 1 [\"a\", \"b\", \"c\"]// c 2 [\"a\", \"b\", \"c\"] 指定 fn 中 this 的值123456789101112131415161718192021222324var database = &#123; users: [\"张含韵\", \"江一燕\", \"李小璐\"], sendEmail: function (user) &#123; if (this.isValidUser(user)) &#123; console.log(\"你好，\" + user); &#125; else &#123; console.log(\"抱歉，\"+ user +\"，你不是本家人\"); &#125; &#125;, isValidUser: function (user) &#123; return /^张/.test(user); &#125;&#125;;// 给每个人法邮件database.users.forEach( // database.users 中人遍历 database.sendEmail, // 发送邮件 database // 使用 database 代替 sendEmail 的this);// 结果：// 你好，张含韵// 抱歉，江一燕，你不是本家人// 抱歉，李小璐，你不是本家 forEach 不会遍历被删除的元素12345678910111213var arr = [ 'a', 'b', 'c' ];delete arr[1];console.log(arr); // [ \"a\", , \"c\" ]console.log(arr.length); // 3arr.forEach(function (value, index) &#123; console.log(value, index);&#125;)// a 0// b 2 模拟实现12","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.filter()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/03-Array.filter/","text":"filter: 过滤 描述filter() 方法对数组中每一项运行给定函数 fn ,返回使该函数返回值为 true 的项组成的数组。 参数 参数 描述 fn function 类型，必需。数组中每个元素需要调用的函数 context 可选。执行回调时的上下文（this） fn 函数有三个参数，依次是： 遍历的数组元素 对应的元素索引 数组本身 返回值过滤后的新数组，即令给定函数 fn 返回值为 true 的数组元素组成的新数组。 示例打印 fn 参数值123456789var arr = [ 'a', 'b', 'c' ];arr.filter(function(value, index, array) &#123; console.log( value, index, array )&#125;);// a 0 [\"a\", \"b\", \"c\"]// b 1 [\"a\", \"b\", \"c\"]// c 2 [\"a\", \"b\", \"c\"] fn 返回值如果不是布尔值，则会默认被转换成布尔值1234567var data = [ 0, 1, 2, 3 ];var arrFilter= data.filter(function (item) &#123; return item;&#125;);console.log(arrFilter); // [ 1, 2, 3 ] 模拟实现12345678Array.prototype.filter = function (fn, context) &#123; var arr = []; for (var i = 0; i &lt; this.length; i++) &#123; var bool = fn.call(context, this[i], i, this); if (bool) arr.push(this[i]); &#125; return arr;&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.map()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/02-Array.map/","text":"map: 映射 描述map() 方法对数组中每一项运行给定函数 callback ，返回值是每次 callback 函数调用的结果组成的数组。 另外可以指定函数 callback 的上下文环境（this）。 使用 map() 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。 在 map() 方法执行过程中： 原数组新增加的元素将不会被 callback 访问到； 被删除的元素将不会被访问到。 若已经存在的元素被改变或删除了，则它们传递到 callback 的值是 map() 方法遍历到它们的那一时刻的值； 参数 参数 描述 callback function 类型，必需。数组中每个元素需要调用的函数 context 可选。执行回调时的上下文（this） callback 函数支持 3 个参数，依次是： 遍历的数组元素 对应的元素索引 数组本身 返回值返回给定函数 callback 调用的结果组成的数组。 示例打印 callback 参数值123456789var arr = [ 'a', 'b', 'c' ];arr.map(function(value, index, array) &#123; console.log( value, index, array )&#125;);// a 0 [\"a\", \"b\", \"c\"]// b 1 [\"a\", \"b\", \"c\"]// c 2 [\"a\", \"b\", \"c\"] callback 执行时的 this 值默认为 window (或 global)123456789var arr = [ 1, 2, 3 ];this.name = 'name';arr.map(function () &#123; console.log(this.name);&#125;);// name// name// name callback 需要有 return 值，否则会被映射成 undefined123456var data = [ 1, 2, 3 ];// 无 return 值var arrOfSquares = data.map(function (item) &#123;&#125;);console.log(arrOfSquares); // [undefined, undefined, undefined] 求平方1234567var data = [ 1, 2, 3 ];var arrOfSquares = data.map(function (item) &#123; return item * item;&#125;);console.log(arrOfSquares); // [ 1, 4, 9 ] 获取对象数组中的特定属性值们1234567891011var users = [ &#123; name: '张三', age: 18 &#125;, &#123; name: '李四', age: 19 &#125;, &#123; name: '王五', age: 21 &#125;];var names = users.map(function (user) &#123; return user.name;&#125;);console.log(names.join('，')); // 张三，李四，王五 模拟实现12345678910if (typeof Array.prototype.map != 'function') &#123; Array.prototype.map = function (fn, context) &#123; var arr = []; if (typeof fn === 'function') &#123; for (var i = 0, len = this.length; i &lt; len; k++) &#123; arr.push(fn.call(context, this[i], k, this)); &#125; &#125; &#125;&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.some()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/04-Array.some/","text":"描述some() 方法对数组每一项运行给定函数 fn ，如果该函数对任意一项返回 true ，则 some() 方法返回 true，否则返回 false。 参数 参数 描述 fn function 类型，必需。数组中每个元素需要调用的函数 context 可选。执行回调时的上下文（this） fn 函数有三个参数，依次是： 遍历的数组元素 对应的元素索引 数组本身 返回值如果数组中存在使得给定函数 fn 返回 true 的元素，返回 true ，否则返回 false 。 示例打印 fn 参数值123456789var arr = [ 'a', 'b', 'c' ];arr.some(function(value, index, array) &#123; console.log( value, index, array )&#125;);// a 0 [\"a\", \"b\", \"c\"]// b 1 [\"a\", \"b\", \"c\"]// c 2 [\"a\", \"b\", \"c\"] 如果 fn 返回 true ，则 some() 立即返回 true。1234567891011var arr = [ 'a', 'b', 'c' ];var some = arr.some(function(value, index, array) &#123; console.log( value, index, array ); return value === 'b';&#125;);// a 0 [\"a\", \"b\", \"c\"]// b 1 [\"a\", \"b\", \"c\"]console.log(some); // true fn 返回值如果不是布尔值，则会默认被转换成布尔值1234567891011var data = [ 0, 1, 2, 3 ];var some = data.some(function (item) &#123; console.log(item); return item;&#125;);// 0// 1console.log(some); // true 模拟实现123456789101112Array.prototype.some = function (fn, context) &#123; var arr = this; var fn = fn; var context = context; for(var i = 0; i &lt; arr.length; i++) &#123; var bool = fn.call(context, arr[i], i, arr); if (!!bool) return true; &#125; return false;&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.every()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/05-Array.every/","text":"描述every() 方法对数组每一项运行给定函数 fn ，如果该函数对每一项都返回 true ，则 every() 方法返回 true，否则返回 false。 参数 参数 描述 fn function 类型，必需。数组中每个元素需要调用的函数 context 可选。执行回调时的上下文（this） fn 函数有三个参数，依次是： 遍历的数组元素 对应的元素索引 数组本身 返回值如果数组中每一项都使得给定函数 fn 返回 true，则 every() 方法返回 true ，否则返回 false 。 示例打印 fn 参数值123456789var arr = [ 'a', 'b', 'c' ];arr.every(function(value, index, array) &#123; console.log( value, index, array )&#125;);// a 0 [\"a\", \"b\", \"c\"]// b 1 [\"a\", \"b\", \"c\"]// c 2 [\"a\", \"b\", \"c\"] 如果 fn 返回 false ，则 every() 立即返回 false。12345678910var arr = [ 'a', 'b', 'c' ];var isEvery = arr.every(function(value, index, array) &#123; console.log( value, index, array ); return value === 'b';&#125;);// a 0 [\"a\", \"b\", \"c\"]console.log(isEvery); // false 模拟实现123456789101112Array.prototype.every = function (fn, context) &#123; var arr = this; var fn = fn; var context = context; for(var i = 0; i &lt; arr.length; i++) &#123; var bool = fn.call(context, arr[i], i, arr); if (!bool) return false; &#125; return true;&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.indexOf()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/06-Array.indexOf/","text":"描述indexOf() 方法返回在数组中可以找到一个给定元素的第一个索引（使用全等操作符），如果不存在，则返回 -1 。 参数 参数 描述 searchElement 要查找的元素 fromIndex 可选。开始查找的位置，如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回 -1 。如果参数提供的是一个负值，则将其作为数组末尾的一个抵消，即 -1 表示从最后一个元素开始查找， -2 表示从倒数第二个元素开始查找，以此类推（查找顺序不变，仍然是从前向后查询数组）。如果抵消后的索引值仍小于 0 ，则整个数组都会被查询。默认值为 0 。 返回值首个被找到的元素在数组中的索引，若没有找到则返回 -1 。 示例返回首个被查找到的元素的索引12345678var arr = [ 'a', 'b', 'c', 'a' ];var indexB = arr.indexOf('b');var indexD = arr.indexOf('d');console.log(indexB); // 1console.log(indexD); // -1 严格相等1234567var arr = [1, 2, 3];var indexStr = arr.indexOf('2');var indexNum = arr.indexOf(2);console.log(indexStr); // -1console.log(indexNum); // 1 使用 fromeIndex 参数1234567var arr = [ 'a', 'b', 'c', 'b', 'a' ];var indexB1 = arr.indexOf('b');var indexB2 = arr.indexOf('b', 2);console.log(indexB1); // 1console.log(indexB2); // 3 fromIndex 大于或等于数组长度，返回 -112345var arr = [ 'a', 'b', 'c' ];var index = arr.indexOf('a', 5);console.log(index); // -1 fromIndex 为负值123456var arr = [ 'a', 'b', 'c' ];// -1 表示从倒数第一个元素开始查找var index = arr.indexOf('a', -1);console.log(index); // -1 模拟实现1234567891011121314151617181920Array.prototype.indexOf = function (searchElement, fromIndex) &#123; var se = searchElement; var fi = parseInt(fromIndex) || 0; var arr = this; var len = arr.length; var i = 0; if (fi &gt;= len) return -1 if (fi &lt; 0) &#123; i = len + fi &#125; for (; i &lt; arr.length; i++) &#123; if (arr[i] === se) &#123; return i; &#125; &#125; return -1&#125; 拓展indexOf 存在一个局限性，就是它只能得到查找元素在数组中首次出现位置的索引，那如何得到该元素在数组中所有出现位置的索引呢？ 下面是实现方法： 12345678910111213141516171819/** 返回查找元素在数组中所有的索引组成的数组，如果数组中不存在此元素，返回空数组。*/Array.prototype.allIndexOf = function (searchElement) &#123; var arr = this; var se = searchElement; var arrIndex = []; var index = 0; for (var i = 0; i &lt; arr.length; i++) &#123; index = arr.indexOf(se, i); if (index === -1) &#123; return []; &#125; arrIndex.push(index); i = index; &#125; return arrIndex;&#125; 测试 1234var arr = [ 1, 2, 3, 2, 1];console.log( arr.allIndexOf(1) ); // [0, 4]console.log( arr.allIndexOf(9) ); // []","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.lastIndexOf()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/07-Array.lastIndexOf/","text":"描述lastIndexOf() 方法返回在指定元素在数组中的最后一个的索引，如果不存在则返回 -1 。 查找方式为从数组的后面向前查找，从 fromIndex 处开始（使用全等操作符）。 参数 参数 描述 searchElement 要查找的元素 fromIndex 可选。开始查找的位置，在此位置开始从后向前查找。如果该值为负值且绝对值大于或等于数组长度，则返回 -1 。如果参数提供的是一个负值，则将其作为数组末尾的一个抵消，即 -1 表示从最后一个元素开始查找， -2 表示从倒数第二个元素开始查找，以此类推（查找顺序不变，仍然是从后向前查询数组）。默认值为数组长度减 1 ，即整个数组都被查找 。 返回值首个被找到的元素在数组中的索引，若没有找到则返回 -1 。 示例返回首个被查找到的元素的索引12345678var arr = [ 'a', 'b', 'c', 'b', 'a' ];var indexB = arr.lastIndexOf('b');var indexD = arr.lastIndexOf('d');console.log(indexB); // 3 console.log(indexD); // -1 严格相等1234567var arr = [1, 2, 3];var indexStr = arr.lastIndexOf('2');var indexNum = arr.lastIndexOf(2);console.log(indexStr); // -1console.log(indexNum); // 1 使用 fromeIndex 参数1234567var arr = [ 'a', 'b', 'c', 'b', 'a' ];var indexB1 = arr.lastIndexOf('b');var indexB2 = arr.lastIndexOf('b', 2);console.log(indexB1); // 3 console.log(indexB2); // 1 fromIndex 为负值123456789var arr = [ 'a', 'b', 'c', 'b', 'a' ];var index1 = arr.lastIndexOf('a');// -2 表示从倒数第二个元素开始查找var index2 = arr.lastIndexOf('a', -2);console.log(index1); // 4 console.log(index2); // 0 fromIndex 为负值且绝对值大于或等于数组长度，返回 -11234567var arr = [ 'a', 'b', 'c' ];var indexA = arr.lastIndexOf('a', 5);var indexB = arr.lastIndexOf('b', -5);console.log(indexA); // 0 console.log(indexB); // -1 模拟实现1234567891011121314151617181920Array.prototype.lastIndexOf = function (searchElement, fromIndex) &#123; var se = searchElement; var arr = this; var len = arr.length; var fi = parseInt(fromIndex) || len - 1; var i = fi; if (fi &lt; 0 &amp;&amp; -fi &gt;= len) return -1 if (fi &lt; 0) &#123; i = len + fi &#125; for (; i &gt;= 0; i--) &#123; if (arr[i] === se) &#123; return i; &#125; &#125; return -1&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.reduce()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/08-Array.reduce/","text":"reduce: 减少，缩小。但是 reduce() 方法并无此含义，而是“迭代，递归”。 描述reduce() 方法从左向右迭代数组所有项，构建一个最终返回的值。 reduce() 方法接收两个参数：一个在每一项上调用的函数和（可选）作为迭代基础的初始值。 参数 参数 描述 fn 迭代时执行的函数 initialValue 可选。当做初次调用 fn 的第一个参数值。 fn 有 4 个参数： 之前值，initialValue 。若缺省 initialValue ，则使用数组第一个元素作为初始值。 当前值，若指定 initialValue ，当前值为数组第一个元素，否则使用数组第二个元素。 索引值，当前值的索引 调用 reduce() 的数组 返回值数组迭代执行 fn 完毕，最后一次执行 fn 的返回值。 示例不指定 initialValue1234567var nums = [ 0, 1, 2, 3, 4 ];var sum = nums.reduce(function ( previous, current, index, array ) &#123; console.log( previous, current, index, array, previous + current ); return previous + current;&#125;)console.log(sum); // 10 函数 fn 被执行 4 次， 每次的参数和返回值如下： previous current index array 返回值 第一次 0 1 1 [0, 1, 2, 3, 4] 1 第二次 1 2 2 [0, 1, 2, 3, 4] 3 第三次 3 3 3 [0, 1, 2, 3, 4] 6 第四次 6 4 4 [0, 1, 2, 3, 4] 10 指定 initialValue1234567var nums = [ 0, 1, 2, 3, 4 ];var sum = nums.reduce(function ( previous, current, index, array ) &#123; console.log( previous, current, index, array, previous + current ); return previous + current;&#125;, 100)console.log(sum); // 110 函数 fn 被执行 5 次， 每次的参数和返回值如下： previous current index array 返回值 第一次 100 0 0 [0, 1, 2, 3, 4] 100 第二次 100 1 1 [0, 1, 2, 3, 4] 101 第三次 101 2 2 [0, 1, 2, 3, 4] 103 第四次 103 3 3 [0, 1, 2, 3, 4] 106 第五次 106 4 4 [0, 1, 2, 3, 4] 110 模拟实现1// TODO","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.prototype.reduceRight()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/09-Array.reduceRight/","text":"描述reduceRight() 方法从右向左迭代数组所有项，构建一个最终返回的值。 reduceRight() 方法接收两个参数：一个在每一项上调用的函数和（可选）作为迭代基础的初始值。 参数 参数 描述 fn 迭代时执行的函数 initialValue 可选。当做初次调用 fn 的第一个参数值。 fn 有 4 个参数： 之前值，initialValue 。若缺省 initialValue ，则使用数组第一个元素作为初始值。 当前值，若指定 initialValue ，当前值为数组第一个元素，否则使用数组第二个元素。 索引值，当前值的索引 调用 reduce() 的数组 返回值数组迭代执行 fn 完毕，最后一次执行 fn 的返回值。 示例不指定 initialValue1234567var nums = [ 0, 1, 2, 3, 4 ];var sum = nums.reduce(function ( previous, current, index, array ) &#123; console.log( previous, current, index, array, previous + current ); return previous + current;&#125;)console.log(sum); // 10 函数 fn 被执行 4 次， 每次的参数和返回值如下： previous current index array 返回值 第一次 0 1 1 [0, 1, 2, 3, 4] 1 第二次 1 2 2 [0, 1, 2, 3, 4] 3 第三次 3 3 3 [0, 1, 2, 3, 4] 6 第四次 6 4 4 [0, 1, 2, 3, 4] 10 指定 initialValue1234567var nums = [ 0, 1, 2, 3, 4 ];var sum = nums.reduce(function ( previous, current, index, array ) &#123; console.log( previous, current, index, array, previous + current ); return previous + current;&#125;, 100)console.log(sum); // 110 函数 fn 被执行 5 次， 每次的参数和返回值如下： previous current index array 返回值 第一次 100 0 0 [0, 1, 2, 3, 4] 100 第二次 100 1 1 [0, 1, 2, 3, 4] 101 第三次 101 2 2 [0, 1, 2, 3, 4] 103 第四次 103 3 3 [0, 1, 2, 3, 4] 106 第五次 106 4 4 [0, 1, 2, 3, 4] 110 模拟实现1// TODO","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.isArray()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/02-Array-ES5/10-Array.isArray/","text":"描述Array.isArray() 方法用于确定一个值是否为 Array 类型。 注意：Array.isArray() 方法只能由构造函数 Array 调用，而数组实例无法调用。 ps：严格判断 JavaScript 对象是否为数组 参数 参数 描述 value 需要检测的值 返回值如果被检测的值是 Array 类型，返回 true ，否则返回 false 。 示例1234567891011Array.isArray([]); // trueArray.isArray([1]); // trueArray.isArray(new Array()); // trueArray.isArray(Array.prototype); // trueArray.isArray(); // false Array.isArray(&#123;&#125;); // false Array.isArray(null); // false Array.isArray(undefined); // false Array.isArray(12); // false Array.isArray(true); // false 模拟实现123Array.isArray = function (value) &#123; return Object.prototype.toString.call(value) === '[Object Array]';&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"02-Array-ES5","slug":"oh-my-js/02-Array-ES5","permalink":"http://yoursite.com/categories/oh-my-js/02-Array-ES5/"}]},{"title":"Array.of()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/02-Array.of/","text":"描述Array.of 方法用于将一组值转换为数组。基本可以用来替代 Array() 或者 new Array()，并且不存在由于参数不同而导致的重载。 参数 参数 描述 arguments 任意值，不限个数。作为数组的元素。 返回值返回由参数值组成的数组。如果没有参数，就返回一个空数组。 示例1234567Array.of(); // []Array.of(undefined); // [ undefined ]Array.of(1); // [ 1 ]Array.of(1, 2); // [ 1, 2 ] 模拟实现123function ArrayOf()&#123; return [].slice.call(arguments);&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.xxx()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/01-Array.from/","text":"描述参数 参数 描述 xxx yyy 返回值示例 1234567```## 模拟实现 ```js","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.xxx()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/03-Array.copyWithin/","text":"描述参数 参数 描述 xxx yyy 返回值示例 1234567```## 模拟实现 ```js","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.find()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/04-Array.find/","text":"描述find 方法用于找出第一个符合条件的数组元素。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找到第一个返回值为 true 的元素，然后返回该元素。如果没有符合条件的元素，则返回 undefined。 参数 参数 描述 callback 数组元素依次执行的回调函数 thisValue 指定 callback 执行的上下文环境，即 this 的值 返回值第一个符合条件的数组元素 示例打印 callback 的参数123456789var arr = [ 'a', 'b', 'c' ];arr.find(function(value, index, array) &#123; console.log(value, index, array);&#125;);// a 0 [\"a\", \"b\", \"c\"]// b 1 [\"a\", \"b\", \"c\"]// c 2 [\"a\", \"b\", \"c\"] find() 的返回值有符合条件的，返回该数组元素，没有符合条件的，返回 undefined 1234567891011var arr = [ 'a', 'b', 'c' ];var result1 = arr.find(function(value, index, array) &#123; return value == 'c'; &#125;);console.log(result1); // \"c\"var result2 = arr.find(function(value, index, array) &#123; return value == 'xyz'; &#125;);console.log(result2); // undefined 找到第一个符合条件的，方法立即结束执行12345678910var arr = [ 'a', 'b', 'b', 'c' ];var result1 = arr.find(function(value, index, array) &#123; console.log(value); return value == 'b'; &#125;);// \"a\"// \"b\"console.log(result1); // \"b\" 指定 callback 执行时的 this 指向1234567var ages = [ 10, 12, 26, 15 ];var person = &#123;name: 'John', age: 20&#125;;var age = ages.find(function (value) &#123; return value &gt; this.age;&#125;, person);console.log(age); // 26","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.join()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/01-Array-ES3/02-Array.join/","text":"描述所有的数组元素都被转化成字符串，再用一个分隔符将这些字符串连接起来。如果元素是 undefined 或者 null，则会被转换成空字符串。 参数 参数 描述 separator 可选。 指定要选的分隔符，如果省略，则使用逗号为分隔符。 返回值一个字符串 示例（1）数组元素为基本类型12345var names = [ '李白', '杜甫', '苏轼' ];names.join(); // \"李白,杜甫,苏轼\"names.join( '、' ); // \"李白、杜甫、苏轼\" （2）数组元素为数组对象12345var arr = [ 1, 2, [ 3, 4 ] ];arr.join(); // \"1,2,3,4\"arr.join('+'); // \"1+2+3,4\" （3）数组元素为对象123var arr = [ 1, 2, &#123; name: 'zwc' &#125; ];arr.join(); // \"1,2,[object Object]\" （4）小结实际上 join() 方法是对数组中每一项元素都进行了 toString() 操作转换成字符串之后进行的拼接。 undefined 和 null 执行 toString() 则会报错，因此将其转化为空字符串 1234567(&#123; type: 'object' &#125;).toString(); // \"[object Object]\"([ 3, 4 ]).toString(); // \"3,4\"(true).toString(); // \"true\"(function () &#123; console.log('hello') &#125;).toString(); // \"function () &#123; console.log('hello') &#125;\" 模拟实现1234567891011121314151617/** 模拟原生 Array.join()*/Array.prototype.join = function () &#123; var sep = arguments &amp;&amp; arguments[0] || ','; var str = ''; for ( var i = 0; i &lt; this.length; i++ ) &#123; var item = this[i]; item === undefined || null ? '' : item; str += sep + item.toString(); &#125; return str.replace(sep, '');&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es3","slug":"es3","permalink":"http://yoursite.com/tags/es3/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"01-Array-ES3","slug":"oh-my-js/01-Array-ES3","permalink":"http://yoursite.com/categories/oh-my-js/01-Array-ES3/"}]},{"title":"Array.prototype.xxx()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/05-Array.findIndex/","text":"描述参数 参数 描述 xxx yyy 返回值示例 1234567```## 模拟实现 ```js","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.xxx()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/07-Array.entries/","text":"描述参数 参数 描述 xxx yyy 返回值示例 1234567```## 模拟实现 ```js","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.xxx()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/08-Array.keys/","text":"描述参数 参数 描述 xxx yyy 返回值示例 1234567```## 模拟实现 ```js","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.xxx()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/09-Array.values/","text":"描述参数 参数 描述 xxx yyy 返回值示例 1234567```## 模拟实现 ```js","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"Array.prototype.includes()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/10-Array.includes/","text":"描述方法 includes 返回一个布尔值，表示某个数组是否包含给定的值。 参数 参数 描述 value 必需。被检测的值 fromIndex Number 类型，可选。表示搜索的起始位置，默认为 0 返回值布尔值，表示某个数组是否包含给定的值。 示例不指定 fromIndex1234const arr = [ 1, 2, 4 ];arr.includes(1); // truearr.includes(3); // false 指定 fromIndex1234const arr = [ 1, 2, 4 ];arr.includes(1, 1); // falsearr.includes(2, 2); // false","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]},{"title":"String.prototype.toLowerCase()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/04-String/001-String.toLowerCase/","text":"描述toLowerCase 会将调用该方法的字符串转为小写形式，并返回。 toLowerCase 不会影响字符串本身。 参数无 返回值一个新的字符串，转换为小写形式之后的字符串。 示例12345var str = 'GitHub'var newStr = str.toLowerCase();console.log(str); // GitHubconsole.log(newStr); // github","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"string","slug":"string","permalink":"http://yoursite.com/tags/string/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"04-String","slug":"oh-my-js/04-String","permalink":"http://yoursite.com/categories/oh-my-js/04-String/"}]},{"title":"String.prototype.toUpperCase()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/04-String/002-String.toUpperCase/","text":"描述toUpperCase 会将调用该方法的字符串转为大写形式，并返回。 toUpperCase 不会影响字符串本身。 参数无 返回值一个新的字符串，转换为大写形式之后的字符串。 示例12345var str = 'app'var newStr = str.toUpperCase();console.log(str); // appconsole.log(newStr); // APP","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"string","slug":"string","permalink":"http://yoursite.com/tags/string/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"04-String","slug":"oh-my-js/04-String","permalink":"http://yoursite.com/categories/oh-my-js/04-String/"}]},{"title":"Object.prototype.hasOwnProperty()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/05-Object/01-hasOwnProperty/","text":"描述JavaScript 对象既可以有自己的属性，也可以从原型继承。通过 hasOwnProperty 可以区分继承属性和非继承属性。 参数 参数 描述 prop String 类型，必需。要检测的属性名 返回值布尔值，对象自身是否拥有被检测的属性。 示例判断自身属性 prop 是否存在123456789101112var obj = new Object();obj.prop = 'ok';function changeObj () &#123; obj.newProp = obj.prop; delete obj.prop;&#125;obj.hasOwnProperty('prop'); // truechangeObj();obj.hasOwnProperty('prop'); // false 区分自身属性和继承属性123456var obj = new Object();obj.prop = 'ok';obj.hasOwnProperty('prop'); // trueobj.hasOwnProperty('toString'); // falseobj.hasOwnProperty('hasOwnProperty'); // false 在遍历一个对象所有自身属性时使用注意：for...in 循环只会遍历可枚举属性 1234567891011var obj = new Object();obj.prop = 'ok';Object.prototype.name = 'name';for (var k in obj) &#123; if (obj.hasOwnProperty(k)) &#123; console.log('hasOwnProperty: ', k); &#125; else &#123; console.log('Not hasOwnProperty: ', k); &#125;&#125; hasOwnProperty 被改写1234567891011var obj = &#123; hasOwnProperty: function () &#123; return false; &#125;, prop: 'ok'&#125;;obj.hasOwnProperty('prop'); // 永远都返回 false// 为避免这种情况，可以使用 Object 原型链上的 hasOwnProperty 属性来判断Object.prototype.hasOwnProperty.call(obj, 'prop');","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"object","slug":"object","permalink":"http://yoursite.com/tags/object/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"05-Object","slug":"oh-my-js/05-Object","permalink":"http://yoursite.com/categories/oh-my-js/05-Object/"}]},{"title":"Object.values()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/05-Object/03-Object.values/","text":"描述ES6 引入 Object.values 方法，它返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值 参数 参数 描述 obj Object 类型，必需。要处理的对象 返回值数组类型 示例1. 普通对象12var obj = &#123; foo: 'bar', boo: 123 &#125;;console.log( Object.values(obj) ); // [ 'bar', 123 ] 2. 类数组对象12var obj = &#123; 0: 'a', 1: 'b', 2: 'c' &#125;;console.log( Object.values(obj) ); // [ 'a', 'b', 'c' ] 3. 随机索引的类数组对象12var obj = &#123; 100: 'a', 2: 'b', 7: 'c' &#125;;console.log( Object.values(obj) ); // [ 'b', 'c', 'a' ] 4.5. 异常1Object.values( 'foo' ); // [ 'f', 'o', 'o' ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"object","slug":"object","permalink":"http://yoursite.com/tags/object/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"05-Object","slug":"oh-my-js/05-Object","permalink":"http://yoursite.com/categories/oh-my-js/05-Object/"}]},{"title":"Object.keys()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/05-Object/02-Object.keys/","text":"描述ES6 引入 Object.keys 方法，它返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。 参数 参数 描述 obj Object 类型，必需。要处理的对象 返回值一个表示给定对象的所有可枚举属性的字符串数组 示例0. 基本使用1234567var arr = &#123; name: 'jack', age: 20, sex: 'man'&#125;;var keys = Object.keys(arr); // [\"name\", \"age\", \"sex\"] 1. 简单数组12var arr = [ 'a', 'b', 'c' ];console.log( Object.keys(arr) ); // [ '0', '1', '2' ] 2. 类数组对象12var obj = &#123; 0: 'a', 1: 'b', 2: 'c' &#125;;console.log( Object.keys(obj) ); // [ '0', '1', '2' ] 3. 随机索引的类数组对象注意顺序，按照索引从小到大进行遍历。 12var anObj = &#123; 100: 'a', 2: 'b', 7: 'c' &#125;;console.log( Object.keys(anObj) ); // [ '2', '7', '100' ] 4. 包含不可枚举属性123456789var obj = Object.create(&#123;&#125;, &#123; getFoo: &#123; value: function () &#123; return this.foo; &#125; &#125;&#125;);obj.foo = 1;console.log( Object.keys(obj) ); // [ 'foo' ] 5. 异常处理ES5 中，如果参数是原始值，会抛出异常。ES6 中则会强制转化为一个对象。 123Object.keys( 'foo' ); // TypeError: \"foo\" is not an object (ES5 code)Object.keys( 'foo' ); // [ '0', '1', '2' ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"object","slug":"object","permalink":"http://yoursite.com/tags/object/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"05-Object","slug":"oh-my-js/05-Object","permalink":"http://yoursite.com/categories/oh-my-js/05-Object/"}]},{"title":"Object.entries()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/05-Object/04-Object.entries/","text":"描述ES6 引入 Object.entries 方法，它返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。 参数 参数 描述 obj Object 类型，必需。要处理的对象 返回值数组类型 示例1. 普通对象12var obj = &#123; foo: 'bar', boo: 123 &#125;;console.log( Object.entries(obj) ); // [ [\"foo\", \"bar\"], [\"boo\", 123] ] 2. 类数组对象12var obj = &#123; 0: 'a', 1: 'b', 2: 'c' &#125;;console.log( Object.entries(obj) ); // [ [\"0\", \"a\"], [\"1\", \"b\"], [\"2\", \"c\"] ] 3. 随机索引的类数组对象12var obj = &#123; 100: 'a', 2: 'b', 7: 'c' &#125;;console.log( Object.values(obj) ); // [ [\"2\", \"b\"], [\"7\", \"c\"], [\"100\", \"a\"] ] 4.5. 异常1Object.values( 'foo' ); // [ 'f', 'o', 'o' ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"object","slug":"object","permalink":"http://yoursite.com/tags/object/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"05-Object","slug":"oh-my-js/05-Object","permalink":"http://yoursite.com/categories/oh-my-js/05-Object/"}]},{"title":"Object.is()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/05-Object/06-Object.is/","text":"描述ES6 引入 Object.assign 方法，它用于比较两个值是否严格相等。 相等运算符（==）会自动转换类型，严格相等运算符 NaN 不等于自身，而且 +0 等于 -0。 Object.is() 方法和严格相等运算符基本一致，不同之处有两个，一是 +0 不等于 -0，二是 NaN 等于自身。 参数两个进行比较的值 返回值如果两个参数相等，返回 true ，否则返回 false 。 示例0. 基本使用123Object.is( &#123;&#125;, &#123;&#125; ); // falseObject.is( 'abc', 'abc' ); // true 1. Object.is() 不会自动转换类型123console.log( '5' == 5 ); // trueconsole.log( Object.is('5', 5) ); // false 2. Object.is() 和 严格相等（===）的区别12345console.log( Object.is( NaN, NaN ) ); // trueconsole.log( NaN === NaN ); // falseconsole.log( Object.is( -1, +1 ) ); // falseconsole.log( +1 === -1)","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"object","slug":"object","permalink":"http://yoursite.com/tags/object/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"05-Object","slug":"oh-my-js/05-Object","permalink":"http://yoursite.com/categories/oh-my-js/05-Object/"}]},{"title":"Object.assign()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/05-Object/05-Object.assign/","text":"描述ES6 引入 Object.assign 方法，它用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。 如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。 参数第一个参数是目标对象，后面的参数都是源对象。 返回值合并之后的目标对象。 示例0. 基本使用12345678const target = &#123; a: 1 &#125;;const source1 = &#123; b: 2 &#125;;const source2 = &#123; c: 3 &#125;;Object.assign(target, source1, source2);console.log(target); // &#123;a: 1, b: 2, c: 3&#125; 1. 同名属性后面覆盖前面12345678const target = &#123; a: 1, b: 1 &#125;;const source1 = &#123; b: 2 , c: 2 &#125;;const source2 = &#123; c: 3 &#125;;Object.assign(target, source1, source2);console.log(target); // &#123;a: 1, b: 2, c: 3&#125; 2. 只有一个参数只有一个参数，直接返回该参数 12const obj = &#123; a: 1 &#125;;Object.assign(obj) === obj; // true 如果该参数不是对象，则会先转成对象，然后返回。 1typeof Object.assign(2); // \"object\" 参数是 undefined 或 null，会报错。 12Object.assign(undefined); // 报错Object.assign(null); // 报错 3. 源对象不是 Object 类型如果源对象不是 Object 类型，会先将其转换为对象，如果无法转换，则跳过。 因此，undefined 和 null 不会报错，数字和布尔值也不会报错，会直接跳过，无任何效果。 而字符串会以数组形式拷贝到目标对象。 123456Object.assign(&#123;&#125;, undefined); // &#123;&#125;Object.assign(&#123;&#125;, null); // &#123;&#125;Object.assign(&#123;&#125;, 1); // &#123;&#125;Object.assign(&#123;&#125;, true); // &#123;&#125;Object.assign(&#123;&#125;, 'abcd'); // &#123;0: \"a\", 1: \"b\", 2: \"c\", 3: \"d\"&#125;Object.assign(&#123;&#125;, &#123; a: 1 &#125;); // &#123; a: 1 &#125; 4. assign() 是浅拷贝如果源对象的某个属性值是对象，那么目标对象拷贝得到的是这个对象的引用。 此属性发生任何变化，都会反映到目标对象上。 1234567const obj = &#123; person: &#123; name: 'jack' &#125; &#125;;const obj2 = Object.assign(&#123;&#125;, obj);obj.person.name = 'tom';console.log(obj2.person.name); // \"tom\" 5. 数组的处理Object.assign 可以用来处理数组，但是会把数组视为对象。 1Object.assign([1, 2, 3], [4, 5]); // [4, 5, 3]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"object","slug":"object","permalink":"http://yoursite.com/tags/object/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"05-Object","slug":"oh-my-js/05-Object","permalink":"http://yoursite.com/categories/oh-my-js/05-Object/"}]},{"title":"Object.defineProperty()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/05-Object/07-Object.defineProperty/","text":"用法这个方法在一个对象上定义一个新属性，或者修改一个已经存在的属性。并返回这个对象。 1Object.defineProperty(obj, prop, descriptor); obj: 目标对象 prop: 要操作的属性 descriptor: 要操作的属性所拥有的特性 descriptor 用于指定对象属性的特性，这些特性包括： value: 属性的值，默认为 undefined writable: 属性的值是否可以被重写，默认为 true get: 获取属性值的时候触发的函数，默认为 undefined set: 设置属性值的时候触发的函数，默认为 undefined configurable: 是否可以删除目标属性或是否可以再次修改属性的特性，默认为 true enumerable: 此属性是否可以被枚举（使用for…in或Object.keys()），默认为 true 示例修改属性的 value12345678var obj = &#123; name: 'jack', age: 18 &#125;;Object.defineProperty( obj, 'age', &#123; value: 22&#125;);console.log( obj.age ); // 22// age 属性已经被修改 如果对象不存在这个属性，就会创建这个属性 1234567var obj = &#123; name: 'jack' &#125;;Object.defineProperty( obj, 'age', &#123; value: 22&#125;);console.log( obj ); // &#123;name: \"jack\", age: 22&#125; 修改属性的 writable将 writable 设置为 false 。 1234567var obj = &#123; name: 'jack', age: 18 &#125;;Object.defineProperty( obj, 'age', &#123; writable: false&#125;);console.log( obj.age ); // 18 若直接对属性赋值，不起作用，也不报错。 123// 直接对属性赋值，不起作用，也不报错obj.age = 22;console.log( obj.age ); // 18 只能使用 Object.defineProperty 方法修改其值。 12345// 使用 defineProperty 方法修改，修改成功Object.defineProperty( obj, 'age', &#123; value: 22&#125;);console.log( obj.age ); // 22 将 writable 设置为 true 之后可以直接进行赋值 123456Object.defineProperty( obj, 'age', &#123; writable: true&#125;);obj.age = 20;console.log( obj.age ); // 20 enumerableenumerable 用来表示此属性是否可以被枚举（使用 for in 和 Object.keys() ）。 12345678910111213var obj = &#123; name: 'jack', age: 18 &#125;;for (k in obj) &#123; console.log(k, obj[k]);&#125;// name jack// age 18console.log( Object.keys(obj) );// [ \"name\", \"age\" ]console.log( Object.values(obj) );// [ \"jack\", 18 ] 将 enumerable 设置为 false 1234567891011121314Object.defineProperty( obj, 'age', &#123; enumerable: false&#125;)for (k in obj) &#123; console.log(k, obj[k]);&#125;// name jackconsole.log( Object.keys(obj) );// [ \"name\" ]console.log( Object.values(obj) );// [ \"jack\" ] set 和 get先来看 get，get 方法会在获取 age 属性的时候执行，并将其返回值作为 age 属性的值。 12345678910var obj = &#123; name: 'jack', age: 18 &#125;;Object.defineProperty( obj, 'age', &#123; get: function () &#123; return 'get age'; &#125;&#125;)console.log( obj.age );// \"get age\" 再来看 set 1234567891011121314var obj = &#123; name: 'jack', age: 18 &#125;;Object.defineProperty( obj, 'age', &#123; set: function ( newValue ) &#123; console.log( 'newValue:', newValue ) &#125;&#125;);obj.age = 22;console.log( 'age:', obj.age )// newValue: 22// age: undefined set 方法接收一个参数，即将要给 age 设置的新值。 set 方法的返回值是最终 age 属性的值，如果 set 方法没有返回值，则为 undefined。 1234567891011121314var obj = &#123; name: 'jack', age: 18 &#125;;Object.defineProperty( obj, 'age', &#123; set: function ( newValue ) &#123; return newValue; &#125;&#125;);obj.age = 22;console.log( 'age:', obj.age )// newValue: 22// age: undefined","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"object","slug":"object","permalink":"http://yoursite.com/tags/object/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"05-Object","slug":"oh-my-js/05-Object","permalink":"http://yoursite.com/categories/oh-my-js/05-Object/"}]},{"title":"正则表达式预查","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/0-正则表达式预查/","text":"预查格式(?=pattern) 上代码通俗点说，就是 预查不消耗字符串，仅仅是用来确认是否匹配成功。 123456var str = \"abc\";var reg1 = /a(?=b)bc/;var reg2 = /a(b)bc/;console.log(reg1.test(str)); // trueconsole.log(reg2.test(str)); // false reg1 中的预查 (?=b) 并没有消耗掉匹配到的字符 b，而是确认 a 后面的字符是 b，因此 a 后面的字符 bc 和 预查后面的正则 bc 匹配成功，最后结果为 true。 而 reg2 中的 (b) 将 str 中的 b 消耗掉，str 中只剩一个字符 c，无法与 reg2 中 (b) 后面的 bc 相匹配，最后结果为 false。 示例千分制表示一个数字如何给一串数字用千分制表示？比如 99999999999 变成 99, 999, 999, 999。 $&amp; 表示与正则表达式相匹配的字符 123var reg = /\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+$)/g;var f = '99999999999'.replace(reg, '$&amp;, ');console.log(f); // 99, 999, 999, 999 正则表达式中的 $ 很重要，它保证了每一个匹配到的字符串后面都是三个数字。如果没有 $，会怎样？ 123var reg = /\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+)/g;var f = '99999999999'.replace(reg, '$&amp;, ');console.log(f); // 999, 999, 99, 999","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"正则表达式的 lastIndex 属性","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/01-Regexp.lastIndex/","text":"描述在每个实例化的正则对象中，都存在一个 lastIndex 属性，初始值为 0 。 lastIndex 属性是进行正则匹配操作的开始的位置 如果正则表达式不带 g 标志，则 lastIndex 始终为 0。 如果正则表达式带有 g 标志，匹配成功则将匹配内容最后一个字符串在原字符串中的索引加 1 设置为 lastIndex 的值，匹配失败则重置为 0。 示例返回值123456789101112var reg1 = /ab/;var reg2 = /ab/g;var str = 'abcabc';console.log(reg1.lastIndex, reg1.test(str)); // 0 trueconsole.log(reg1.lastIndex, reg1.test(str)); // 0 trueconsole.log(reg1.lastIndex, reg1.test(str)); // 0 trueconsole.log(reg2.lastIndex, reg2.test(str)); // 0 trueconsole.log(reg2.lastIndex, reg2.test(str)); // 2 trueconsole.log(reg2.lastIndex, reg2.test(str)); // 5 false// 当 lastIndex 为 5 时，正则匹配从 str[5] 的位置开始，结果为 false","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"正则表达式","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/00-Regexp/","text":"正则表达式验证工具： https://regexper.com/ 创建正则表达式构造函数123var reg1 = new RegExp('a');var reg2 = new RegExp('[a-zA-Z]', 'gi');var reg3 = new RegExp(/[a-zA-Z]/, 'gi'); 字面量1var reg = /[a-zA-Z]/gi; 修饰符 修饰符 描述 i 执行对大小写不敏感的匹配 g 执行全局匹配（查找所有匹配，而非在找到第一个匹配后停止） m 执行多行匹配 s 执行单行匹配 正则对象属性 属性均为只读，无法设置其值 属性 含义 默认值 global 是否全文搜索 false ignoreCase 是否大小写敏感 false multiline 多行搜索 false lastIndex 是当前表达式匹配内容的最后一个字符的下一个位置 无 source 正则表达式的文本字符串 无 示例： 123456789101112var reg1 = /\\w/;var reg2 = /\\w/gim;console.log(reg1.global); // falseconsole.log(reg1.ignoreCase); // falseconsole.log(reg1.multiline); // falseconsole.log(reg1.source); // \"\\w\"console.log(reg2.global); // trueconsole.log(reg2.ignoreCase); // trueconsole.log(reg2.multiline); // trueconsole.log(reg2.source); // \"\\w\" 方括号 表达式 描述 [abc] 匹配方括号之间的任何字符 [^abc] 匹配任何不在方括号之间的字符 [0-9] 匹配任何从 0 至 9 的数字 [a-z] 匹配任何从小写 a 到小写 z 的字符 [A-Z] 匹配任何从大写 A 到大写 Z 的字符 [A-z] 匹配任何从大写 A 到小写 z 的字符 [adgk] 匹配给定集合内的任何字符 [^adgk] 匹配给定集合外的任何字符 (red blue green) 匹配任何指定的选项 子表达式用括号括起来的正则表达式。例如： 1234var str = 'hello world';var reg = /(\\w*)\\s*(\\w*)/;var ans = str.replace(reg, '$2 $1')console.log(ans); // world hello 如 /(\\w*)\\s*(\\w*)/ 中，第一个括号 (\\w*) 匹配到的字符串（本例中是 hello），记为 $1，第二个括号 (\\w*) 匹配到的字符串（本例中是 world），记为 $2。 简单地说：从左到右，以分组的左括号为标志，第一个出现的分组的序号为 1，第二个为 2，以此类推。 复杂地说：分组 0 对应整个正则表达式实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号。可以使用 (?:exp) 这样的语法来剥夺一个分组对组号分配的参与权。 参考：我所认识的javascript正则表达式 元字符元字符是拥有特殊含义的字符： 元字符 描述 . 匹配除 \\n 以外的任何字符（注意元字符是小数点）。 \\w 匹配大小写英文字符及数字 0 到 9 之间的任意一个及下划线，相当于 [a-zA-Z0-9_] \\W 不匹配大小写英文字符及数字 0 到 9 之间的任意一个，相当于 [^a-zA-Z0-9_] \\s 匹配任何空白字符，相当于 [ \\f\\n\\r\\t\\v] \\S 匹配任何非空白字符，相当于 [^\\s] \\b 匹配单词边界 \\B 匹配非单词边界 \\d 匹配任何 0 到 9 之间的单个数字，相当于 [0-9] \\D 不匹配任何 0 到 9 之间的单个数字，相当于 [^0-9] [\\u4e00-\\u9fa5] 匹配任意单个汉字（这里用的是 Unicode 编码表示汉字的 ) 助记： w: word s: space d: digit 量词（限定符）上面的元字符都是针对单个字符匹配的，要想同时匹配多个字符的话，还需要借助限定符。 下面是一些常见的限定符 ( 下表中 n 和 m 都是表示整数，并且 0 &lt; n &lt; m) ： 限定符 描述 {n} 匹配 n 个元字符 {n,} 匹配至少 n 个元字符 {n,m} 匹配 n 到 m 个元字符 * 匹配 0 到多个元字符，相当于 {0,} ? 匹配 0 到 1 个元字符，相当于 {0,1} + 匹配至少 1 个元字符，相当于 {1,} ^ 字符串必须以指定的字符开始 $ 字符串必须以指定的字符结束 其他 由于在正则表达式中\\、?、*、^、$、+、(、)、|、{、[等字符已经具有一定特殊意义，如果需要用它们的原始意义，则应该对它进行转义，例如希望在字符串中至少有一个“ \\ ”，那么正则表达式应该这么写： \\\\+ 。 可以将多个元字符或者原义文本字符用括号括起来形成一个分组，比如 ^(13)[4-9]\\d{8}$ 表示任意以 13 开头的移动手机号码。 另外对于中文字符的匹配是采用其对应的 Unicode 编码来匹配的，对于单个 Unicode 字符，如 \\u4e00 表示汉字“一”， \\u9fa5 表示汉字“龥”，在 Unicode 编码中这分别是所能表示的汉字的第一个和最后一个的 Unicode 编码，在 Unicode 编码中能表示 20901 个汉字。 关于 \\b 的用法，它代表单词的开始或者结尾，以字符串 123a 345b 456 789d 作为示例字符串，如果正则表达式是 \\b\\d{3}\\b，则仅能匹配 456 。 可以使用 | 来表示或的关系，例如 [z|j|q] 表示匹配 z 、 j 、 q 之中的任意一个字母。 正则验证工具： https://regexper.com/","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"Regexp.prototype.test()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/02-Regexp.test/","text":"描述检测字符串中是否含有与 regexp 相匹配的文本。 参数 参数 描述 string 必需。要检测的字符串 返回值如果字符串 string 中含有与 regexp 匹配的文本，就返回 true，否则返回 false 示例12345var reg = /java/i;reg.test('javascript'); // 返回 truereg.test('ECMAScript'); // 返回 false 123var reg = /java$/i;reg.test('javascript'); // false","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"String.prototype.search()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/04-String.prototype.search/","text":"描述检测字符串中是否含有与 regexp 相匹配的文本。类似于 Regexp.prototype.test 方法。 参数 参数 描述 regexp 必需。如果传入一个非正则表达式，则会使用 new RegExp() 将其隐式转换为正则表达式对象 返回值如果匹配成功，则返回正则表达式在字符串中首次匹配项的索引。否则，返回 -1 示例1234567var reg = /java/i;'javascript'.search(reg); // 0'learn java'.search(reg); // 6'ECMAScript'.search(reg); // -1","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"String.prototype.replace()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/06-String.prototype.replace/","text":"描述参数 参数 描述 regexp 必需。如果传入一个非正则表达式，则会使用 new RegExp() 将其隐式转换为正则表达式对象 返回值见描述 示例是否包含 g 的区别123456789101112'This is a hello world!'.match(/(hello \\S+)/g); // [\"hello world!\"]var matches = /(hello \\S+)/.exec('This is a hello world!');console.log(matches);// [// 0: \"hello world!\"// 1: \"hello world!\"// groups: ined// index: 10// input: s is a hello world!\"// length: 2// ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"Regexp.prototype.exec()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/03-Regexp.exec/","text":"描述在一个指定字符串中执行一个搜索匹配。返回一个数组或 null。 参数 参数 描述 string 必需。要匹配正则表达式的字符串。 返回值如果匹配成功，exec() 方法返回一个数组，并更新正则表达式对象的属性。 返回的数组将完全匹配成功的文本作为第一项，将正则括号里匹配成功的作为数组元素填充到后面。 如果匹配失败，返回 null。 示例返回值12345678910111213141516var str = 'leftTop';var reg = /^([a-z]*)([A-Z]\\w*)*/;var result = reg.exec(str);console.log( result );// [// 0: \"leftTop\"// 1: \"left\"// 2: \"Top\"// groups: undefined// index: 0// input: \"leftTop\"// length: 3// ] 数组第一个元素：完全匹配成功的文本 数组第二个元素：匹配到正则第一个括号内表达式的文本 数组第三个元素：匹配到正则第二个括号内表达式的文本 （以此类推……） 数组的 index 属性：匹配成功的文本首个字符在原表达式中的索引 数组的 input 属性：用于匹配正则表达式的原始字符串 返回 null1234var reg = /abc/;var str = 'javascript';var result = reg.exec(str);consle.log(result); // null 更新正则表达式对象的属性正则表达式在有 g 标志的情况下，每次执行 exec() 方法后，会更新正则表达式的 lastIndex 属性。 1234567891011121314151617181920212223242526272829var reg = /(hello \\S+)/g; // 有 g 标志var str = 'This is a hello world! This is a hello regexp!'console.log(reg.lastIndex); // 0reg.exec(str);// [// 0: \"hello world!\"// 1: \"hello world!\"// groups: undefined// index: 10// input: \"This is a hello world! This is a hello regexp!\"// length: 2// ]console.log(reg.lastIndex); // 22// 即 world! 后面的那个空格的索引reg.exec(str); // 第二次执行 exec() 时，从 reg.lastIndex 开始向后索引// [// 0: \"hello regexp!\"// 1: \"hello regexp!\"// groups: undefined// index: 33// input: \"This is a hello world! This is a hello regexp!\"// length: 2// ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"String.prototype.match()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/05-String.prototype.match/","text":"描述检测字符串中是否含有与 regexp 相匹配的文本。 如果正则表达式不包含 g 标志，则 match() 方法返回值和 RegExp.exec() 返回值是相同的。 如果正则表达式包含 g 标志，则返回一个数组，包含所有匹配的字符串，而不是匹配对象（即不会返回 input 属性和 index 属性）。 参数 参数 描述 regexp 必需。如果传入一个非正则表达式，则会使用 new RegExp() 将其隐式转换为正则表达式对象 返回值见描述 示例是否包含 g 的区别123456789101112'This is a hello world!'.match(/(hello \\S+)/g); // [\"hello world!\"]var matches = /(hello \\S+)/.exec('This is a hello world!');console.log(matches);// [// 0: \"hello world!\"// 1: \"hello world!\"// groups: ined// index: 10// input: s is a hello world!\"// length: 2// ]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"String.prototype.split()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/06-Regexp/07-String.prototype.split/","text":"描述把一个字符串分割成一个数组。 它和 Array.prototype.join() 的操作是相反的。 参数 参数 描述 regexp 必需。如果传入一个非正则表达式，则会使用 new RegExp() 将其隐式转换为正则表达式对象 返回值见描述 示例例子11234var str = 'hello world';var reg = /\\s/;str.split(reg); // [ \"hello\", \"world\" ] 例子21234var str = 'a:b:c:d';var reg = /:/;str.split(reg); // [\"a\", \"b\", \"c\", \"d\"]","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"regexp","slug":"regexp","permalink":"http://yoursite.com/tags/regexp/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"06-Regexp","slug":"oh-my-js/06-Regexp","permalink":"http://yoursite.com/categories/oh-my-js/06-Regexp/"}]},{"title":"Array.prototype.xxx()","date":"2017-02-19T16:28:21.000Z","path":"wiki/oh-my-js/03-Array-ES6/06-Array.fill/","text":"描述参数 参数 描述 xxx yyy 返回值示例 1234567```## 模拟实现 ```js","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"array","slug":"array","permalink":"http://yoursite.com/tags/array/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"categories":[{"name":"oh-my-js","slug":"oh-my-js","permalink":"http://yoursite.com/categories/oh-my-js/"},{"name":"03-Array-ES6","slug":"oh-my-js/03-Array-ES6","permalink":"http://yoursite.com/categories/oh-my-js/03-Array-ES6/"}]}]}