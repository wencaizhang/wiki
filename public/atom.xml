<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oh-My-Wiki</title>
  
  
  <link href="/wiki/atom.xml" rel="self"/>
  
  <link href="https://wencaizhang.gitee.io/"/>
  <updated>2018-12-25T07:48:43.499Z</updated>
  <id>https://wencaizhang.gitee.io/</id>
  
  <author>
    <name>wencaizhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js 中使用 let 和 const 的总结</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/js/2018-10/difference-of-let-and-const/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/js/2018-10/difference-of-let-and-const/</id>
    <published>2018-10-14T03:51:14.000Z</published>
    <updated>2018-12-25T07:48:43.499Z</updated>
    
    <content type="html"><![CDATA[<p>ES6 引入了 <code>let</code> 命令用于声明<strong>变量</strong>，引入了 <code>const</code> 命令用于声明<strong>常量</strong>。然而仅仅知道这些是不够的，具体哪些场景下使用 <code>let</code>，哪些场景使用 <code>const</code> 仍然令人感到疑惑。</p><p>这两个命令的学习可参考文章：<a href="http://es6.ruanyifeng.com/#docs/let" rel="external nofollow noopener noreferrer" target="_blank">let 和 const 命令</a>，这里只参考下面一段话：</p><blockquote><p><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code> 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</p></blockquote><p>因此，我认为声明简单类型数据（数字、字符串、布尔值）的时候使用 <code>let</code>，而在声明引用类型（对象、数组）的时候使用 <code>const</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://es6.ruanyifeng.com/#docs/let" rel="external nofollow noopener noreferrer" target="_blank">let 和 const 命令</a></li><li><a href="https://blog.csdn.net/qq_35713752/article/details/81701262" rel="external nofollow noopener noreferrer" target="_blank">js中 let var const 的差异和使用场景</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6 引入了 &lt;code&gt;let&lt;/code&gt; 命令用于声明&lt;strong&gt;变量&lt;/strong&gt;，引入了 &lt;code&gt;const&lt;/code&gt; 命令用于声明&lt;strong&gt;常量&lt;/strong&gt;。然而仅仅知道这些是不够的，具体哪些场景下使用 &lt;code&gt;let&lt;/cod
      
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="js" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/"/>
    
      <category term="2018-10" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/2018-10/"/>
    
    
      <category term="javascript" scheme="https://wencaizhang.gitee.io/tags/javascript/"/>
    
      <category term="es6" scheme="https://wencaizhang.gitee.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>为 Markdown 写作配置七牛云图床</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/tool/upload-markdown-picture-to-qiniuyun/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/tool/upload-markdown-picture-to-qiniuyun/</id>
    <published>2018-10-12T12:20:51.000Z</published>
    <updated>2018-10-12T14:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-This"><a href="#What-is-This" class="headerlink" title="What is This"></a>What is This</h2><p>使用 Markdown 写作大家带来了很大的方便，但是如何处理图片一直是个问题，这里分享一个我使用的解决方案。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先要拥有一个七牛云的账号（<a href="https://portal.qiniu.com/signup?code=3ln23pc0t2xci" rel="external nofollow noopener noreferrer" target="_blank">七牛云注册地址</a>），然后通过 Chrome 网上应用商店安装 qiniu upload files 插件（<a href="https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc?utm_source=chrome-ntp-icon" rel="external nofollow noopener noreferrer" target="_blank">点击这里进行安装</a>）。</p><p>插件安装之后进行配置（截图如下）：</p><ol><li>AccessKey 和 SecretKey 可以从七牛云网站个人面板下的密钥管理界面获取</li><li>域名末尾记得加上 <code>/</code>，否则插件生成的链接可能有问题</li><li>bucket 是创建的储存空间的名字</li><li>其他配置项可以不填</li></ol><p><img src="http://qiniu.wencaizhang.com/qiniu-upload-files-config.png" alt="插件配置"></p><h2 id="可能有用的链接："><a href="#可能有用的链接：" class="headerlink" title="可能有用的链接："></a>可能有用的链接：</h2><ol><li><a href="https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc?utm_source=chrome-ntp-icon" rel="external nofollow noopener noreferrer" target="_blank">qiniu upload files 插件下载地址</a></li><li><a href="https://portal.qiniu.com/signup?code=3ln23pc0t2xci" rel="external nofollow noopener noreferrer" target="_blank">七牛云注册地址</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What-is-This&quot;&gt;&lt;a href=&quot;#What-is-This&quot; class=&quot;headerlink&quot; title=&quot;What is This&quot;&gt;&lt;/a&gt;What is This&lt;/h2&gt;&lt;p&gt;使用 Markdown 写作大家带来了很大的方便，但是如何处
      
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="tool" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/tool/"/>
    
    
      <category term="markdown" scheme="https://wencaizhang.gitee.io/tags/markdown/"/>
    
      <category term="图床" scheme="https://wencaizhang.gitee.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="chrome 插件" scheme="https://wencaizhang.gitee.io/tags/chrome-%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>如何查找数组中指定元素</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/js/2018-10/array-find/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/js/2018-10/array-find/</id>
    <published>2018-10-09T08:51:14.000Z</published>
    <updated>2018-12-25T07:48:43.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>我们经常会遇到这样的情况：假设现在有下面这样一个数组，现在需要在该数组中找到 <code>id 等于 2</code> 的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'11111'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'22222'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'33333'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">text</span>: <span class="string">'44444'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个问题有很多解决的方法，例如：遍历然后逐个元素进行判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = arr[i];</span><br><span class="line">  <span class="keyword">if</span> (item.id == <span class="number">2</span>) &#123;</span><br><span class="line">    target = item</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(target);  <span class="comment">// &#123;id: 2, text: "22222"&#125;</span></span><br></pre></td></tr></table></figure><p>这里有一个简单的方法，实现如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id == <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target)  <span class="comment">// &#123;id: 2, text: "22222"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><code>find</code> 方法用于找出第一个符合条件的数组元素。如果没有符合条件的元素，则返回 <code>undefined</code>。</p><p><code>find</code> 方法第一个参数是一个回调函数，而这个判断条件是此回调函数的返回值是否为 true（这里会对返回值进行隐式转换）。</p><p>数组中每一项元素依次执行该回调函数，直到找到第一个返回值为 <code>true</code> 的元素，方法停止执行，然后返回该元素。</p><p><code>find</code> 方法还可以接收第二个参数用于指定回调函数的 <code>this</code> 指向。</p><h3 id="回调函数默认接收三个参数"><a href="#回调函数默认接收三个参数" class="headerlink" title="回调函数默认接收三个参数"></a>回调函数默认接收三个参数</h3><p><code>find</code> 方法的第一个参数默认接收三个参数，第一个是遍历的数组元素，第二个是对应的数组索引，第三个是数组本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</span><br><span class="line"></span><br><span class="line">arr.find(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, index, array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 0 ["a", "b", "c"]</span></span><br><span class="line"><span class="comment">// b 1 ["a", "b", "c"]</span></span><br><span class="line"><span class="comment">// c 2 ["a", "b", "c"]</span></span><br></pre></td></tr></table></figure><h3 id="find-的返回值"><a href="#find-的返回值" class="headerlink" title="find() 的返回值"></a><code>find()</code> 的返回值</h3><p>有符合条件的，返回该数组元素，没有符合条件的，返回 <code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = arr.find(<span class="function"><span class="params">v</span> =&gt;</span> v == <span class="string">'c'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result1) <span class="comment">// "c"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = arr.find(<span class="function"><span class="params">v</span> =&gt;</span> v == <span class="string">'xyz'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="找到第一个符合条件的，方法立即结束执行"><a href="#找到第一个符合条件的，方法立即结束执行" class="headerlink" title="找到第一个符合条件的，方法立即结束执行"></a>找到第一个符合条件的，方法立即结束执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.find(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> value == <span class="string">'b'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "a"</span></span><br><span class="line"><span class="comment">// "b"</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// "b"</span></span><br></pre></td></tr></table></figure><h3 id="指定-callback-执行时的-this-指向"><a href="#指定-callback-执行时的-this-指向" class="headerlink" title="指定 callback 执行时的 this 指向"></a>指定 callback 执行时的 <code>this</code> 指向</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [ <span class="number">10</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">15</span> ];</span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> age = ages.find(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="keyword">this</span>.age;</span><br><span class="line">&#125;, person);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age);  <span class="comment">// 26</span></span><br></pre></td></tr></table></figure><h2 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h2><p><code>find</code> 方法在 ES6 中提出，尚未被所有浏览器实现，这里有一个简易版的实现方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.find = <span class="function"><span class="keyword">function</span> (<span class="params">callback, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123; <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> bool, target;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">    bool = !!callback.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (bool) &#123;</span><br><span class="line">      target = <span class="keyword">this</span>[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;我们经常会遇到这样的情况：假设现在有下面这样一个数组，现在需要在该数组中找到 &lt;code&gt;id 等于 2&lt;/code&gt; 的元素。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="js" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/"/>
    
      <category term="2018-10" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/2018-10/"/>
    
    
      <category term="javascript" scheme="https://wencaizhang.gitee.io/tags/javascript/"/>
    
      <category term="array" scheme="https://wencaizhang.gitee.io/tags/array/"/>
    
      <category term="es6" scheme="https://wencaizhang.gitee.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>小程序的传参方案</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BC%A0%E5%8F%82%E6%96%B9%E6%A1%88/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/小程序/小程序的传参方案/</id>
    <published>2018-10-06T07:43:23.000Z</published>
    <updated>2018-12-25T07:59:08.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、点击事件传参"><a href="#一、点击事件传参" class="headerlink" title="一、点击事件传参"></a>一、点击事件传参</h3><h4 id="1-通过-data-属性指定参数"><a href="#1-通过-data-属性指定参数" class="headerlink" title="1. 通过 data-* 属性指定参数"></a>1. 通过 <code>data-*</code> 属性指定参数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"block"</span> <span class="attr">bindtap</span>=<span class="string">"playTap"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;modle.id&#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-通过事件对象-e-获取参数"><a href="#2-通过事件对象-e-获取参数" class="headerlink" title="2. 通过事件对象 e 获取参数"></a>2. 通过事件对象 <code>e</code> 获取参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">playTap (e) &#123;</span><br><span class="line"><span class="keyword">const</span> dataset = e.currentTarget.dataset;</span><br><span class="line"><span class="built_in">console</span>.log(dataset.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、页面跳转传参"><a href="#二、页面跳转传参" class="headerlink" title="二、页面跳转传参"></a>二、页面跳转传参</h3><p>小程序页面和普通的 html 相似，都可以通过查询字符串（例如 <code>?a=1&amp;b=2</code> 的形式）传递参数。</p><h4 id="1-通过查询字符串传参"><a href="#1-通过查询字符串传参" class="headerlink" title="1. 通过查询字符串传参"></a>1. 通过查询字符串传参</h4><p>还是上面的例子，获取到 <code>id</code> 之后，跳转到新页面并将 <code>id</code> 传递到新页面，那么就可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">playTap (e) &#123;</span><br><span class="line"><span class="keyword">const</span> dataset = e.currentTarget.dataset;</span><br><span class="line"><span class="built_in">console</span>.log(dataset.id);</span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">url: <span class="string">'../play/index/?id='</span> + dataset.id</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在生命周期函数-onLoad-中获取参数："><a href="#2-在生命周期函数-onLoad-中获取参数：" class="headerlink" title="2. 在生命周期函数 onLoad 中获取参数："></a>2. 在生命周期函数 <code>onLoad</code> 中获取参数：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad (options) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、点击事件传参&quot;&gt;&lt;a href=&quot;#一、点击事件传参&quot; class=&quot;headerlink&quot; title=&quot;一、点击事件传参&quot;&gt;&lt;/a&gt;一、点击事件传参&lt;/h3&gt;&lt;h4 id=&quot;1-通过-data-属性指定参数&quot;&gt;&lt;a href=&quot;#1-通过-data-属性指
      
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="小程序" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://wencaizhang.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序列表页的下拉刷新</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/小程序/小程序列表页的下拉刷新/</id>
    <published>2018-10-06T07:43:23.000Z</published>
    <updated>2018-12-25T07:58:00.136Z</updated>
    
    <content type="html"><![CDATA[<p>下拉刷新，我们可以使用 <code>onPullDownRefresh()</code> 方法，对此小程序文档是这么说的：</p><blockquote><ul><li>需要在 app.json 的 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#window" rel="external nofollow noopener noreferrer" target="_blank">window</a> 选项中或<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE" rel="external nofollow noopener noreferrer" target="_blank">页面配置</a>中开启 enablePullDownRefresh。</li><li>可以通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.startPullDownRefresh.html" rel="external nofollow noopener noreferrer" target="_blank"><code>wx.startPullDownRefresh</code></a> 触发下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。</li><li>当处理完数据刷新后，<a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.stopPullDownRefresh.html" rel="external nofollow noopener noreferrer" target="_blank"><code>wx.stopPullDownRefresh</code></a> 可以停止当前页面的下拉刷新。</li></ul></blockquote><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><h4 id="第一步：开启-enablePullDownRefresh"><a href="#第一步：开启-enablePullDownRefresh" class="headerlink" title="第一步：开启 enablePullDownRefresh"></a>第一步：开启 enablePullDownRefresh</h4><p>配置 <code>app.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window: &#123;</span><br><span class="line">  enablePullDownRefresh: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者修改页面配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"enablePullDownRefresh"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二步：监听下拉刷新事件"><a href="#第二步：监听下拉刷新事件" class="headerlink" title="第二步：监听下拉刷新事件"></a>第二步：监听下拉刷新事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    pageSize: <span class="number">10</span>,</span><br><span class="line">    currPage: <span class="number">0</span>,</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onPullDownRefresh() &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  fetchData() &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; pageSize, currPage, list &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">    <span class="comment">// 这个方法用于请求数据，</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">"test.php"</span>, <span class="comment">// 仅为示例，并非真实的接口地址</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        pageSize,</span><br><span class="line">        currPage: currPage + <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data);</span><br><span class="line">        self.setData(&#123;</span><br><span class="line">          list: list.concat(res.data),</span><br><span class="line">          currPage: currPage + <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 处理完成后，终止下拉刷新</span></span><br><span class="line">        wx.stopPullDownRefresh();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下拉刷新，我们可以使用 &lt;code&gt;onPullDownRefresh()&lt;/code&gt; 方法，对此小程序文档是这么说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;需要在 app.json 的 &lt;a href=&quot;https://developers.weixin
      
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="小程序" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://wencaizhang.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序列表页的上拉加载</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/小程序/小程序列表页的上拉加载/</id>
    <published>2018-10-06T07:43:23.000Z</published>
    <updated>2018-12-25T07:57:48.848Z</updated>
    
    <content type="html"><![CDATA[<p>上拉刷新，我们可以使用 <code>onReachBottom()</code> 方法，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0" rel="external nofollow noopener noreferrer" target="_blank">小程序文档</a>是这么说的：</p><blockquote><ul><li>监听用户上拉触底事件。</li><li>可以在 <code>app.json</code> 的 <code>window</code> 选项中或页面配置中设置触发距离 <code>onReachBottomDistance</code>。</li><li>在触发距离内滑动期间，本事件只会被触发一次。</li></ul></blockquote><p>代码实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    pageSize: <span class="number">10</span>,</span><br><span class="line">    currPage: <span class="number">0</span>,</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad () &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onReachBottom () &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  fetchData () &#123;</span><br><span class="line"><span class="comment">// 这个方法用于请求数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; pageSize, currPage, list &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">    </span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">'test.php'</span>, <span class="comment">// 仅为示例，并非真实的接口地址</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        pageSize,</span><br><span class="line">        currPage: currPage + <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.list)</span><br><span class="line">        self.setData(&#123;</span><br><span class="line">          list: list.concat(res.list),</span><br><span class="line">          currPage: currPage + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上拉刷新，我们可以使用 &lt;code&gt;onReachBottom()&lt;/code&gt; 方法，&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9
      
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="小程序" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://wencaizhang.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>网络请求接口-fetch</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/js/2018-09/fetch-api-md/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/js/2018-09/fetch-api-md/</id>
    <published>2018-09-30T11:30:13.000Z</published>
    <updated>2018-12-25T07:48:43.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fetch-简介"><a href="#fetch-简介" class="headerlink" title="fetch 简介"></a>fetch 简介</h2><p>最简单的 fetch 请求如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://example.com/movies.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> resp.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>fetch 请求</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="1-GET-请求"><a href="#1-GET-请求" class="headerlink" title="1 GET 请求"></a>1 GET 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getData (url) &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-POST-请求"><a href="#2-POST-请求" class="headerlink" title="2 POST 请求"></a>2 POST 请求</h3><p>以 form-data 形式提交数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">postData (url, payload) &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(payload),</span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 json 形式提交数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">postJSON (url, payload) &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(payload),</span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">'http://example.com/api/goods_list/'</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">postJSON(url, data)</span><br><span class="line">.then(<span class="function"><span class="params">resp</span> =&gt;</span> resp.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>example2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> fn () &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">'http://example.com/api/goods_list/'</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resp = <span class="keyword">await</span> postJSON(url, data)</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> resp.json()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面开始对返回的数据进行处理</span></span><br><span class="line">    <span class="keyword">if</span> (resp.status == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'success'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fetch-简介&quot;&gt;&lt;a href=&quot;#fetch-简介&quot; class=&quot;headerlink&quot; title=&quot;fetch 简介&quot;&gt;&lt;/a&gt;fetch 简介&lt;/h2&gt;&lt;p&gt;最简单的 fetch 请求如下&lt;/p&gt;
&lt;figure class=&quot;highlight j
      
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="js" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/"/>
    
      <category term="2018-09" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/2018-09/"/>
    
    
      <category term="javascript" scheme="https://wencaizhang.gitee.io/tags/javascript/"/>
    
      <category term="fetch" scheme="https://wencaizhang.gitee.io/tags/fetch/"/>
    
      <category term="ajax" scheme="https://wencaizhang.gitee.io/tags/ajax/"/>
    
      <category term="react-native" scheme="https://wencaizhang.gitee.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 连续赋值</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/js/old/JavaScript-continuous-assignment-operator/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/js/old/JavaScript-continuous-assignment-operator/</id>
    <published>2018-05-22T10:41:00.000Z</published>
    <updated>2018-12-25T07:48:43.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：下面代码的打印结果是什么"><a href="#题目：下面代码的打印结果是什么" class="headerlink" title="题目：下面代码的打印结果是什么"></a>题目：下面代码的打印结果是什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;;</span><br><span class="line">a.x = a = &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.x);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>先啰嗦两句基本知识：</p><ol><li>符号 <code>=</code> 不叫“等于号 ”，这是赋值操作，代码从右往左执行，如 <code>x = 10;</code> 就读作“把 10 赋值给变量 x“</li><li>如果一个变量的数据类型是对象，那么这个变量存储的仅仅是这个对象在堆内存中的地址。</li></ol><p>正文开始：</p><p>第一行代码：首先在堆内存中创建一个对象 <code>{ n: 1 }</code>，然后在栈内存中创建一个变量 <code>a</code> ，<code>a</code> 储存的值实际上是对象 <code>{ n: 1 }</code> 的内存地址，我们假设为 <code>@n1</code>（实际内存地址使用 4 位 16 进制表示）。</p><p><img src="http://7xvule.com1.z0.glb.clouddn.com/stack01.png" alt=""></p><p>第二行代码：<code>.</code> 表示字段访问，其优先级最高。因此首先给变量 <code>a</code> 增加属性 <code>x</code>，属性 <code>x</code> 在未赋值时是 <code>undefined</code>，然后在堆内存中创建一个对象 <code>{ n: 2 }</code>，假设其内存地址为 <code>@n2</code>（如下图）。</p><p><img src="http://7xvule.com1.z0.glb.clouddn.com/stack02.png" alt=""></p><p>先将这个内存地址 <code>@n2</code> 赋值给变量 <code>a</code>，然后将这个内存地址赋值给 <code>a.x</code>，但此时这个 <code>a.x</code> 指代的是内存地址为 <code>@n1</code> 的对象的属性 <code>x</code>。</p><p><img src="http://7xvule.com1.z0.glb.clouddn.com/stack03.png" alt=""></p><p>第三行代码：打印 <code>a.x</code>，由于已经将内存地址为 <code>@n2</code> 赋值给了变量 <code>a</code>，并不存在属性 <code>x</code> ，因此打印结果是 <code>undefined</code> 。</p><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><p>这个问题关键点在于第二行连续赋值操作中，先操作了 <code>.</code> 运算符拿到了 <code>a.x</code> 的地址，即 <code>@n1</code> 对象的属性 <code>x</code>，然后改变了 <code>a</code> 保存的引用地址（由 <code>@n1</code> 改为 <code>@n2</code>）。</p><p>但是 <code>a.x</code> 已经优先计算出了地址，所以并没有受到影响，因此最后将内存地址 <code>@n2</code> 赋值给了 <code>a.x</code> （即 <code>@n1</code> 对象的属性 <code>x</code> )。</p><p>如果将代码稍做修改，也许更容易理解：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.x = a = &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure></p><p>这一次，我们关注 <code>@n1</code> 的变化，先后将 <code>@n1</code> 这个地址赋值给 <code>a</code> 和 <code>b</code>，最后打印 <code>b</code> ，结果是 <code>{ n: 1, x: { n: 2 } }</code>，这就验证了上面的理解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：下面代码的打印结果是什么&quot;&gt;&lt;a href=&quot;#题目：下面代码的打印结果是什么&quot; class=&quot;headerlink&quot; title=&quot;题目：下面代码的打印结果是什么&quot;&gt;&lt;/a&gt;题目：下面代码的打印结果是什么&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123; &lt;span class=&quot;attr&quot;&gt;n&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.x = a = &amp;#123; &lt;span class=&quot;attr&quot;&gt;n&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="js" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/"/>
    
      <category term="old" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/old/"/>
    
    
      <category term="interview" scheme="https://wencaizhang.gitee.io/tags/interview/"/>
    
      <category term="javascript" scheme="https://wencaizhang.gitee.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 连续赋值</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/JavaScript-continuous-assignment-operator/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/JavaScript-continuous-assignment-operator/</id>
    <published>2018-05-22T10:41:00.000Z</published>
    <updated>2018-12-25T07:48:43.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：下面代码的打印结果是什么"><a href="#题目：下面代码的打印结果是什么" class="headerlink" title="题目：下面代码的打印结果是什么"></a>题目：下面代码的打印结果是什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;;</span><br><span class="line">a.x = a = &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.x);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>先啰嗦两句基本知识：</p><ol><li>符号 <code>=</code> 不叫“等于号 ”，这是赋值操作，代码从右往左执行，如 <code>x = 10;</code> 就读作“把 10 赋值给变量 x“</li><li>如果一个变量的数据类型是对象，那么这个变量存储的仅仅是这个对象在堆内存中的地址。</li></ol><p>正文开始：</p><p>第一行代码：首先在堆内存中创建一个对象 <code>{ n: 1 }</code>，然后在栈内存中创建一个变量 <code>a</code> ，<code>a</code> 储存的值实际上是对象 <code>{ n: 1 }</code> 的内存地址，我们假设为 <code>@n1</code>（实际内存地址使用 4 位 16 进制表示）。</p><p><img src="http://7xvule.com1.z0.glb.clouddn.com/stack01.png" alt=""></p><p>第二行代码：<code>.</code> 表示字段访问，其优先级最高。因此首先给变量 <code>a</code> 增加属性 <code>x</code>，属性 <code>x</code> 在未赋值时是 <code>undefined</code>，然后在堆内存中创建一个对象 <code>{ n: 2 }</code>，假设其内存地址为 <code>@n2</code>（如下图）。</p><p><img src="http://7xvule.com1.z0.glb.clouddn.com/stack02.png" alt=""></p><p>先将这个内存地址 <code>@n2</code> 赋值给变量 <code>a</code>，然后将这个内存地址赋值给 <code>a.x</code>，但此时这个 <code>a.x</code> 指代的是内存地址为 <code>@n1</code> 的对象的属性 <code>x</code>。</p><p><img src="http://7xvule.com1.z0.glb.clouddn.com/stack03.png" alt=""></p><p>第三行代码：打印 <code>a.x</code>，由于已经将内存地址为 <code>@n2</code> 赋值给了变量 <code>a</code>，并不存在属性 <code>x</code> ，因此打印结果是 <code>undefined</code> 。</p><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><p>这个问题关键点在于第二行连续赋值操作中，先操作了 <code>.</code> 运算符拿到了 <code>a.x</code> 的地址，即 <code>@n1</code> 对象的属性 <code>x</code>，然后改变了 <code>a</code> 保存的引用地址（由 <code>@n1</code> 改为 <code>@n2</code>）。</p><p>但是 <code>a.x</code> 已经优先计算出了地址，所以并没有受到影响，因此最后将内存地址 <code>@n2</code> 赋值给了 <code>a.x</code> （即 <code>@n1</code> 对象的属性 <code>x</code> )。</p><p>如果将代码稍做修改，也许更容易理解：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.x = a = &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure></p><p>这一次，我们关注 <code>@n1</code> 的变化，先后将 <code>@n1</code> 这个地址赋值给 <code>a</code> 和 <code>b</code>，最后打印 <code>b</code> ，结果是 <code>{ n: 1, x: { n: 2 } }</code>，这就验证了上面的理解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：下面代码的打印结果是什么&quot;&gt;&lt;a href=&quot;#题目：下面代码的打印结果是什么&quot; class=&quot;headerlink&quot; title=&quot;题目：下面代码的打印结果是什么&quot;&gt;&lt;/a&gt;题目：下面代码的打印结果是什么&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123; &lt;span class=&quot;attr&quot;&gt;n&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.x = a = &amp;#123; &lt;span class=&quot;attr&quot;&gt;n&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="todoxxx" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/todoxxx/"/>
    
    
      <category term="interview" scheme="https://wencaizhang.gitee.io/tags/interview/"/>
    
      <category term="javascript" scheme="https://wencaizhang.gitee.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>「译」从 URL 输入到页面展现发生了什么</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/what-really-happens-when-you-navigate-to-a-url/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/what-really-happens-when-you-navigate-to-a-url/</id>
    <published>2018-05-22T03:26:00.000Z</published>
    <updated>2018-12-25T07:44:10.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文翻译自：<a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/#" rel="external nofollow noopener noreferrer" target="_blank">What really happens when you navigate to a URL</a></p><p>为方便理解，本文采用意译，如有兴趣，可阅读英文原文</p></blockquote><a id="more"></a><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol><li>在浏览器中输入网址</li><li>浏览器查找域名对应的 IP 地址</li><li>浏览器向服务器发送 HTTP 请求</li><li>服务器响应并进行重定向</li><li>浏览器向真正的服务器重新发送 HTTP 请求</li><li>服务器处理 HTTP 请求</li><li>服务器响应请求，返回 HTML 页面</li><li>浏览器渲染 HTML 页面</li><li>浏览器请求静态资源，如 css 文件、图片、js 文件</li><li>浏览器发送异步请求</li></ol><p>作为软件开发者，你肯定对 web 应用如何工作以及它工作过程中包含的技术（浏览器、HTML、web server、request handlers 等等）都有一个高水平的认知。</p><p>这篇文章中，我们会对当你访问一个 URL 时发生的一系列事情进行深入研究。</p><h2 id="1-在浏览器中输入网址"><a href="#1-在浏览器中输入网址" class="headerlink" title="1. 在浏览器中输入网址"></a>1. 在浏览器中输入网址</h2><p>输入网址 <code>facebook.com</code>，故事从这里开始：</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image4.png" alt="在浏览器中输入网址"></p><h2 id="2-浏览器查找域名对应的-IP-地址"><a href="#2-浏览器查找域名对应的-IP-地址" class="headerlink" title="2. 浏览器查找域名对应的 IP 地址"></a>2. 浏览器查找域名对应的 IP 地址</h2><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image13.png" alt="找域名对应的 IP 地址"></p><p>访问一个 URL 的第一步就是得到域名对应的 IP 地址，DNS（Domain Name System，域名系统，万维网上作为域名和IP地址相互映射的一个分布式数据库）查找顺序如下：</p><ol><li>浏览器缓存（Browser cache）</li><li>系统缓存（OS cache）</li><li>路由器缓存（Router cache）</li><li>ISP DNS 缓存（ISP DNS cache）</li><li>递归查找（Recursive search）</li></ol><p>这里有一个图来描述 DNS 递归查找的过程</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/500pxAn_example_of_theoretical_DNS_recursion_svg.png" alt="DNS递归查找"></p><blockquote><p>关于 DNS 有件值得担心的事是整个域名像是 wikipedia.org 或者 facebook.com 看起来像是仅仅映射到单一的一个 IP 地址。幸运的是，这里有一些缓解瓶颈的方法：</p><ul><li>Round-robin DNS(轮询调度 DNS)是 DNS 查询结果为多个 IP 地址而不是仅仅一个 IP 地址的解决方案。例如它就解决了 facebook.com 实际上对应着四个 IP 地址的问题。</li><li>Load-balancer (负载均衡)是通过硬件监听指定 IP 地址并且将请求转发到其他服务器。大型网站是使用昂贵的高性能负载均衡器的典型例子。</li><li>Geographic DNS (地理域名系统)通过映射一个域名到不同的 IP 地址的方式提升了可扩展性，这种方法依赖于客户端的地理位置。</li><li>Anycast (任播)是将一个 IP 地址映射到多个物理服务器的路由技术。不幸的是，任播并不适合 TCP 协议，因此在这种情况下几乎不会使用它。</li></ul></blockquote><blockquote><p>绝大部分 DNS 服务器本身使用任播协议来实现 DNS 的高可用性和低延迟性。</p><p>任播(anycast): 是一种网络寻址和路由的策略，使得资料可以根据路由拓朴来决定送到“最近”或“最好”的目的地。</p></blockquote><h2 id="3-浏览器向服务器发送-HTTP-请求"><a href="#3-浏览器向服务器发送-HTTP-请求" class="headerlink" title="3. 浏览器向服务器发送 HTTP 请求"></a>3. 浏览器向服务器发送 HTTP 请求</h2><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image22.png" alt="向服务器发送 HTTP 请求"></p><p>我们可以非常确定 Facebook 的主页没有被缓存到浏览器中，因为动态页面很快会过期甚至立即过期（把过期时间设置为过去某一时间点）。</p><p>所以，浏览器会将请求发送到 Facebook 的服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET http://facebook.com/ HTTP/1.1</span><br><span class="line">Accept: application/x-ms-application, image/jpeg, application/xaml+xml, [...]</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; [...]</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Host: facebook.com</span><br><span class="line">Cookie: datr=1265876274-[...]; locale=en_US; lsd=WW[...]; c_user=2101[...]</span><br></pre></td></tr></table></figure><p><code>GET</code> 请求说明这个 URL 是用来获取的 <code>http://facebook.com</code> 这个页面的 ，浏览器通过 header 中的 <code>User-Agent</code> 来标识自己（用户使用的操作系统及版本，浏览器及版本等等），通过 <code>Accept</code> 和 <code>Accept-Encoding</code> 规定接收哪种类型的响应信息。header 头 <code>Connection</code> 则要求服务器保持 TCP 连接保持连接状态以便于进一步请求。</p><p>另外，这个请求还携带了浏览器在这个域名下的 <code>cookie</code>。你可能已经知道，<code>cookie</code> 是在不同页面中记录网站网站状态的键值对。也就是说，<code>cookie</code> 储存着登录用户的用户名、服务器分配给用户的密码、用户的一些设置等等。<code>cookie</code> 会被储存在客户端的一个文本文件中，每次请求都会一起发送给服务器端。</p><blockquote><p>你可以通过很多工具去查看原生 HTTP 请求和对应的响应信息。我最喜欢的工具是 fiddler，但是仍然有很多别的工具（例如：Firebug），这些工具会给你很大的帮助当你优化一个网站的时候。</p></blockquote><blockquote><p>除了 <code>GET</code> 请求，另外你非常熟悉的另外一种类型的请求是 <code>POST</code> 请求，经常被用作表单提交。<code>GET</code> 请求通过它的 url 发送参数（例如：<code>http://robozzle.com/puzzle.aspx?id=85</code>）,而 <code>POST</code> 请求在 request body 中（就在 request header 下面）发送参数。</p></blockquote><blockquote><p>在 URL <code>http://facebook.com/</code> 中，末尾的 <code>/</code> 是非常重要的。在这个例子中，浏览器可以很安全地在末尾增加 <code>/</code> 。而对于 URL <code>http://example.com/folderOrFile</code>，浏览器就不能自动增加一个 <code>/</code> ，因为浏览器不清楚 <code>folderOrFile</code> 是一个目录还是一个文件。在这种情况下，浏览器将会以不带 <code>/</code> 的形式访问这个 URL ，服务端将会返回一个重定向的响应信息，这就导致了一个不必要的请求和响应。</p></blockquote><h2 id="4-The-facebook-server-responds-with-a-permanent-redirect"><a href="#4-The-facebook-server-responds-with-a-permanent-redirect" class="headerlink" title="4. The facebook server responds with a permanent redirect"></a>4. The facebook server responds with a permanent redirect</h2><p>服务器响应并进行重定向</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image8.png" alt="The facebook server responds with a permanent redirect"></p><p>这是 Facebook 服务端针对浏览器请求返回的响应信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,</span><br><span class="line">      pre-check=0</span><br><span class="line">Expires: Sat, 01 Jan 2000 00:00:00 GMT</span><br><span class="line">Location: http://www.facebook.com/</span><br><span class="line">P3P: CP=&quot;DSP LAW&quot;</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Set-Cookie: made_write_conn=deleted; expires=Thu, 12-Feb-2009 05:09:50 GMT;</span><br><span class="line">      path=/; domain=.facebook.com; httponly</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">X-Cnection: close</span><br><span class="line">Date: Fri, 12 Feb 2010 05:09:51 GMT</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>服务端通过响应一个永久性转移的 HTTP 状态码来告诉浏览器去访问 <code>http://www.facebook.com/</code> 而不是 <code>http://facebook.com/</code> 。</p><blockquote><p>关于服务端一定要将 <code>http://facebook.com/</code> 重定向到 <code>http://www.facebook.com/</code> ，而不是立即将用户希望看到的页面返回到浏览器，这里有一些有趣的原因。</p><p>其中一个原因和搜索引擎排名有关。如有同一个页面有两个 URL，例如 <code>http://www.igoro.com/</code> 和<code>http://igoro.com/</code>，搜索引擎可能会认为它们是两个不同的网站，每个 URL 的访问量都低于它们的总和就导致较低的排名。搜索引擎理解永久性转移（301），而且会将两个 URL 的点击量合并成一个单独的排名。</p><p>同样的，相同内容对应多个 URL 是不利于缓存的。当一个内容拥有多个名字的时候，它将有可能被缓存多次。</p></blockquote><h2 id="5-The-browser-follows-the-redirect"><a href="#5-The-browser-follows-the-redirect" class="headerlink" title="5. The browser follows the redirect"></a>5. The browser follows the redirect</h2><p>浏览器向真正的服务器重新发送 HTTP 请求</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image23.png" alt="The browser follows the redirect"></p><p>浏览器现在知道 <code>http://www.facebook.com/</code> 才是应该访问的正确地址，因此它发送了另外一个 <code>GET</code> 请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET http://www.facebook.com/ HTTP/1.1</span><br><span class="line">Accept: application/x-ms-application, image/jpeg, application/xaml+xml, [...]</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; [...]</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cookie: lsd=XW[...]; c_user=21[...]; x-referer=[...]</span><br><span class="line">Host: www.facebook.com</span><br></pre></td></tr></table></figure><p>header 头的信息和第一次请求相同。</p><h2 id="6-The-server-‘handles’-the-request"><a href="#6-The-server-‘handles’-the-request" class="headerlink" title="6. The server ‘handles’ the request"></a>6. The server ‘handles’ the request</h2><p>服务器处理 HTTP 请求</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image9.png" alt="The server ‘handles’ the request"></p><p>服务端将会接收到 <code>GET</code> 请求，然后加工处理并且返回一个响应信息。</p><p>这看起来像是一个简单的任务，但实际上这里发生了很多有趣的事情 —— 即使是一个像我的博客这样简单的网站也是如此，更不用说像 Facebook 这样大规模可扩展的网站了。</p><h3 id="Web-server-software"><a href="#Web-server-software" class="headerlink" title="Web server software"></a>Web server software</h3><p>web 服务器（如 IIS 或者 Apache）接收到 HTTP 请求然后决定运行哪一个请求处理程序去处理这个请求。一个请求处理程序（由 ASP、.NET、PHP、Ruby 等构建）是一个读取请求和生成 HTML 响应的程序。</p><p>在这个简单的例子中，请求处理程序可以被储存在一个文件中xxx，例如 <code>http://example.com/folder1/page1.aspx</code> 这个 URL 会被映射到 <code>/httpdocs/folder1/page1.aspx</code> 这个文件。web 服务器同样也可以被配置，这样便于手工指定请求处理函数，因此文件 <code>page1.aspx</code> 对应的公开 URL 可以是 <code>http://example.com/folder1/page1</code>。</p><blockquote><p>每一个动态网站都面临一个有意思的难题就是如何储存数据。小型网站通常会有一个 SQL 数据库去储存他们的数据，但是那些储存庞大数据或者拥有很多访客甚至两者兼具的网站，就必须找到一个方法通过多个服务器去将数据分割开。</p></blockquote><h3 id="Request-handler"><a href="#Request-handler" class="headerlink" title="Request handler"></a>Request handler</h3><p>请求处理程序读取请求，以及请求的参数和 <code>cookie</code> 。随后它会读取并且有可能更新一些存储在服务端的数据。然后，程序会生成 HTML 响应</p><h2 id="7-The-server-sends-back-a-HTML-response"><a href="#7-The-server-sends-back-a-HTML-response" class="headerlink" title="7. The server sends back a HTML response"></a>7. The server sends back a HTML response</h2><p>服务器响应请求，返回 HTML 页面</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image10.png" alt="The server sends back a HTML response"></p><p>下面是服务端生成并返回的响应信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,</span><br><span class="line">    pre-check=0</span><br><span class="line">Expires: Sat, 01 Jan 2000 00:00:00 GMT</span><br><span class="line">P3P: CP=&quot;DSP LAW&quot;</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">X-Cnection: close</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Fri, 12 Feb 2010 09:05:55 GMT</span><br><span class="line"> </span><br><span class="line">2b3</span><br><span class="line">��������T�n�@����[...]</span><br></pre></td></tr></table></figure><p>响应信息数据大小为 36kb ，xxxxx</p><p>header 中字段 <code>Content-Encoding</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  </span></span><br><span class="line"><span class="meta">      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">id</span>=<span class="string">"facebook"</span> <span class="attr">class</span>=<span class="string">" no_js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-language"</span> <span class="attr">content</span>=<span class="string">"en"</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>除了压缩之外，header 头指定了是否缓存以及如何缓存这个页面，xxx cookie ，隐私信息，等等</p><blockquote><p>注意这里的 header 头中 <code>Content-Type</code> 被设置为 <code>text/html</code> 。header 告知浏览器将响应内容（response content）当做 HTML 渲染，而不是文件进行下载。浏览器将会通过 header 去决定如何解释相应信息，但是也会参考其他因素，比如 URL 扩展内容。</p></blockquote><h2 id="8-The-browser-begins-rendering-the-HTML"><a href="#8-The-browser-begins-rendering-the-HTML" class="headerlink" title="8. The browser begins rendering the HTML"></a>8. The browser begins rendering the HTML</h2><p>浏览器渲染 HTML 页面</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image6.png" alt="The browser begins rendering the HTML"></p><p>在浏览器接受全部的 HTML 文档信息之前，它就已经开始渲染网站了。</p><h2 id="9-The-browser-sends-requests-for-objects-embedded-in-HTML"><a href="#9-The-browser-sends-requests-for-objects-embedded-in-HTML" class="headerlink" title="9. The browser sends requests for objects embedded in HTML"></a>9. The browser sends requests for objects embedded in HTML</h2><p>浏览器请求静态资源，如 css 文件、图片、js 文件</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image11.png" alt="The browser sends requests for objects embedded in HTML"></p><h2 id="10-The-browser-sends-further-asynchronous-AJAX-requests"><a href="#10-The-browser-sends-further-asynchronous-AJAX-requests" class="headerlink" title="10. The browser sends further asynchronous (AJAX) requests"></a>10. The browser sends further asynchronous (AJAX) requests</h2><p>浏览器发送异步请求</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image12.png" alt="The browser sends further asynchronous (AJAX) requests"></p><p>在 Web 2.0 时代，即使在页面渲染完毕，客户端也还是同服务端保持通信。</p><p>例如，Facebook 聊天功能会保持更新你的朋友列表当他们进来或者离开。为了更新你的在记录中的朋友列表，你的浏览器中的 JavaScript 必须向服务端发送一个异步请求。这个异步请求时一个程序化构造的 GET 或者 POST 请求通过一个特殊的 URL。在 Facebook 这个例子中，客户端发送一个 <code>POST</code> 请求指向 <code>http://www.facebook.com/ajax/chat/buddy_list.php</code> ，它去获取一个关于你有哪些朋友在线的列表。</p><p>这个模式有时叫做 <code>AJAX</code> ，代表着 <code>Asynchronous JavaScript And XML</code>，但即使这样也没有一个特殊的理由要求服务端必须把响应格式化为 <code>XML</code> 格式。例如，Facebook 在异步请求响应中返回 JavaScript 代码段。</p><blockquote><p>通过 fiddler 可以查看浏览器发出的异步请求。事实上，你不仅可以被动地观察这些请求，你利用 fiddler 同样也可以修改和发送请求。</p></blockquote><blockquote><p>Facebook chat 提供了一个关于 <code>AJAX</code> 的有趣问题的一个例子：将数据从服务器推送到客户端。因为 <code>HTTP</code> 是一个请求-响应模式的协议，所以服务器不能向客户端发送新的消息。相反，客户端必须每隔几秒钟得到服务端的响应以便于查看是否有新的消息到达。</p><p>长轮询是一个有趣的技巧，它可以减少</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>关于 web 网站中各个部分如何协同工作，希望本文能对你有所启发。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/#&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;What really happens when you navigate to a URL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为方便理解，本文采用意译，如有兴趣，可阅读英文原文&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="todoxxx" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/todoxxx/"/>
    
    
      <category term="interview" scheme="https://wencaizhang.gitee.io/tags/interview/"/>
    
      <category term="http" scheme="https://wencaizhang.gitee.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>「译」从 URL 输入到页面展现发生了什么</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/http/what-really-happens-when-you-navigate-to-a-url/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/http/what-really-happens-when-you-navigate-to-a-url/</id>
    <published>2018-05-22T03:26:00.000Z</published>
    <updated>2018-10-23T15:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文翻译自：<a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/#" rel="external nofollow noopener noreferrer" target="_blank">What really happens when you navigate to a URL</a></p><p>为方便理解，本文采用意译，如有兴趣，可阅读英文原文</p></blockquote><a id="more"></a><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol><li>在浏览器中输入网址</li><li>浏览器查找域名对应的 IP 地址</li><li>浏览器向服务器发送 HTTP 请求</li><li>服务器响应并进行重定向</li><li>浏览器向真正的服务器重新发送 HTTP 请求</li><li>服务器处理 HTTP 请求</li><li>服务器响应请求，返回 HTML 页面</li><li>浏览器渲染 HTML 页面</li><li>浏览器请求静态资源，如 css 文件、图片、js 文件</li><li>浏览器发送异步请求</li></ol><p>作为软件开发者，你肯定对 web 应用如何工作以及它工作过程中包含的技术（浏览器、HTML、web server、request handlers 等等）都有一个高水平的认知。</p><p>这篇文章中，我们会对当你访问一个 URL 时发生的一系列事情进行深入研究。</p><h2 id="1-在浏览器中输入网址"><a href="#1-在浏览器中输入网址" class="headerlink" title="1. 在浏览器中输入网址"></a>1. 在浏览器中输入网址</h2><p>输入网址 <code>facebook.com</code>，故事从这里开始：</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image4.png" alt="在浏览器中输入网址"></p><h2 id="2-浏览器查找域名对应的-IP-地址"><a href="#2-浏览器查找域名对应的-IP-地址" class="headerlink" title="2. 浏览器查找域名对应的 IP 地址"></a>2. 浏览器查找域名对应的 IP 地址</h2><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image13.png" alt="找域名对应的 IP 地址"></p><p>访问一个 URL 的第一步就是得到域名对应的 IP 地址，DNS（Domain Name System，域名系统，万维网上作为域名和IP地址相互映射的一个分布式数据库）查找顺序如下：</p><ol><li>浏览器缓存（Browser cache）</li><li>系统缓存（OS cache）</li><li>路由器缓存（Router cache）</li><li>ISP DNS 缓存（ISP DNS cache）</li><li>递归查找（Recursive search）</li></ol><p>这里有一个图来描述 DNS 递归查找的过程</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/500pxAn_example_of_theoretical_DNS_recursion_svg.png" alt="DNS递归查找"></p><blockquote><p>关于 DNS 有件值得担心的事是整个域名像是 wikipedia.org 或者 facebook.com 看起来像是仅仅映射到单一的一个 IP 地址。幸运的是，这里有一些缓解瓶颈的方法：</p><ul><li>Round-robin DNS(轮询调度 DNS)是 DNS 查询结果为多个 IP 地址而不是仅仅一个 IP 地址的解决方案。例如它就解决了 facebook.com 实际上对应着四个 IP 地址的问题。</li><li>Load-balancer (负载均衡)是通过硬件监听指定 IP 地址并且将请求转发到其他服务器。大型网站是使用昂贵的高性能负载均衡器的典型例子。</li><li>Geographic DNS (地理域名系统)通过映射一个域名到不同的 IP 地址的方式提升了可扩展性，这种方法依赖于客户端的地理位置。</li><li>Anycast (任播)是将一个 IP 地址映射到多个物理服务器的路由技术。不幸的是，任播并不适合 TCP 协议，因此在这种情况下几乎不会使用它。</li></ul></blockquote><blockquote><p>绝大部分 DNS 服务器本身使用任播协议来实现 DNS 的高可用性和低延迟性。</p><p>任播(anycast): 是一种网络寻址和路由的策略，使得资料可以根据路由拓朴来决定送到“最近”或“最好”的目的地。</p></blockquote><h2 id="3-浏览器向服务器发送-HTTP-请求"><a href="#3-浏览器向服务器发送-HTTP-请求" class="headerlink" title="3. 浏览器向服务器发送 HTTP 请求"></a>3. 浏览器向服务器发送 HTTP 请求</h2><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image22.png" alt="向服务器发送 HTTP 请求"></p><p>我们可以非常确定 Facebook 的主页没有被缓存到浏览器中，因为动态页面很快会过期甚至立即过期（把过期时间设置为过去某一时间点）。</p><p>所以，浏览器会将请求发送到 Facebook 的服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET http://facebook.com/ HTTP/1.1</span><br><span class="line">Accept: application/x-ms-application, image/jpeg, application/xaml+xml, [...]</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; [...]</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Host: facebook.com</span><br><span class="line">Cookie: datr=1265876274-[...]; locale=en_US; lsd=WW[...]; c_user=2101[...]</span><br></pre></td></tr></table></figure><p><code>GET</code> 请求说明这个 URL 是用来获取的 <code>http://facebook.com</code> 这个页面的 ，浏览器通过 header 中的 <code>User-Agent</code> 来标识自己（用户使用的操作系统及版本，浏览器及版本等等），通过 <code>Accept</code> 和 <code>Accept-Encoding</code> 规定接收哪种类型的响应信息。header 头 <code>Connection</code> 则要求服务器保持 TCP 连接保持连接状态以便于进一步请求。</p><p>另外，这个请求还携带了浏览器在这个域名下的 <code>cookie</code>。你可能已经知道，<code>cookie</code> 是在不同页面中记录网站网站状态的键值对。也就是说，<code>cookie</code> 储存着登录用户的用户名、服务器分配给用户的密码、用户的一些设置等等。<code>cookie</code> 会被储存在客户端的一个文本文件中，每次请求都会一起发送给服务器端。</p><blockquote><p>你可以通过很多工具去查看原生 HTTP 请求和对应的响应信息。我最喜欢的工具是 fiddler，但是仍然有很多别的工具（例如：Firebug），这些工具会给你很大的帮助当你优化一个网站的时候。</p></blockquote><blockquote><p>除了 <code>GET</code> 请求，另外你非常熟悉的另外一种类型的请求是 <code>POST</code> 请求，经常被用作表单提交。<code>GET</code> 请求通过它的 url 发送参数（例如：<code>http://robozzle.com/puzzle.aspx?id=85</code>）,而 <code>POST</code> 请求在 request body 中（就在 request header 下面）发送参数。</p></blockquote><blockquote><p>在 URL <code>http://facebook.com/</code> 中，末尾的 <code>/</code> 是非常重要的。在这个例子中，浏览器可以很安全地在末尾增加 <code>/</code> 。而对于 URL <code>http://example.com/folderOrFile</code>，浏览器就不能自动增加一个 <code>/</code> ，因为浏览器不清楚 <code>folderOrFile</code> 是一个目录还是一个文件。在这种情况下，浏览器将会以不带 <code>/</code> 的形式访问这个 URL ，服务端将会返回一个重定向的响应信息，这就导致了一个不必要的请求和响应。</p></blockquote><h2 id="4-The-facebook-server-responds-with-a-permanent-redirect"><a href="#4-The-facebook-server-responds-with-a-permanent-redirect" class="headerlink" title="4. The facebook server responds with a permanent redirect"></a>4. The facebook server responds with a permanent redirect</h2><p>服务器响应并进行重定向</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image8.png" alt="The facebook server responds with a permanent redirect"></p><p>这是 Facebook 服务端针对浏览器请求返回的响应信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,</span><br><span class="line">      pre-check=0</span><br><span class="line">Expires: Sat, 01 Jan 2000 00:00:00 GMT</span><br><span class="line">Location: http://www.facebook.com/</span><br><span class="line">P3P: CP=&quot;DSP LAW&quot;</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Set-Cookie: made_write_conn=deleted; expires=Thu, 12-Feb-2009 05:09:50 GMT;</span><br><span class="line">      path=/; domain=.facebook.com; httponly</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">X-Cnection: close</span><br><span class="line">Date: Fri, 12 Feb 2010 05:09:51 GMT</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>服务端通过响应一个永久性转移的 HTTP 状态码来告诉浏览器去访问 <code>http://www.facebook.com/</code> 而不是 <code>http://facebook.com/</code> 。</p><blockquote><p>关于服务端一定要将 <code>http://facebook.com/</code> 重定向到 <code>http://www.facebook.com/</code> ，而不是立即将用户希望看到的页面返回到浏览器，这里有一些有趣的原因。</p><p>其中一个原因和搜索引擎排名有关。如有同一个页面有两个 URL，例如 <code>http://www.igoro.com/</code> 和<code>http://igoro.com/</code>，搜索引擎可能会认为它们是两个不同的网站，每个 URL 的访问量都低于它们的总和就导致较低的排名。搜索引擎理解永久性转移（301），而且会将两个 URL 的点击量合并成一个单独的排名。</p><p>同样的，相同内容对应多个 URL 是不利于缓存的。当一个内容拥有多个名字的时候，它将有可能被缓存多次。</p></blockquote><h2 id="5-The-browser-follows-the-redirect"><a href="#5-The-browser-follows-the-redirect" class="headerlink" title="5. The browser follows the redirect"></a>5. The browser follows the redirect</h2><p>浏览器向真正的服务器重新发送 HTTP 请求</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image23.png" alt="The browser follows the redirect"></p><p>浏览器现在知道 <code>http://www.facebook.com/</code> 才是应该访问的正确地址，因此它发送了另外一个 <code>GET</code> 请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET http://www.facebook.com/ HTTP/1.1</span><br><span class="line">Accept: application/x-ms-application, image/jpeg, application/xaml+xml, [...]</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; [...]</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cookie: lsd=XW[...]; c_user=21[...]; x-referer=[...]</span><br><span class="line">Host: www.facebook.com</span><br></pre></td></tr></table></figure><p>header 头的信息和第一次请求相同。</p><h2 id="6-The-server-‘handles’-the-request"><a href="#6-The-server-‘handles’-the-request" class="headerlink" title="6. The server ‘handles’ the request"></a>6. The server ‘handles’ the request</h2><p>服务器处理 HTTP 请求</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image9.png" alt="The server ‘handles’ the request"></p><p>服务端将会接收到 <code>GET</code> 请求，然后加工处理并且返回一个响应信息。</p><p>这看起来像是一个简单的任务，但实际上这里发生了很多有趣的事情 —— 即使是一个像我的博客这样简单的网站也是如此，更不用说像 Facebook 这样大规模可扩展的网站了。</p><h3 id="Web-server-software"><a href="#Web-server-software" class="headerlink" title="Web server software"></a>Web server software</h3><p>web 服务器（如 IIS 或者 Apache）接收到 HTTP 请求然后决定运行哪一个请求处理程序去处理这个请求。一个请求处理程序（由 ASP、.NET、PHP、Ruby 等构建）是一个读取请求和生成 HTML 响应的程序。</p><p>在这个简单的例子中，请求处理程序可以被储存在一个文件中xxx，例如 <code>http://example.com/folder1/page1.aspx</code> 这个 URL 会被映射到 <code>/httpdocs/folder1/page1.aspx</code> 这个文件。web 服务器同样也可以被配置，这样便于手工指定请求处理函数，因此文件 <code>page1.aspx</code> 对应的公开 URL 可以是 <code>http://example.com/folder1/page1</code>。</p><blockquote><p>每一个动态网站都面临一个有意思的难题就是如何储存数据。小型网站通常会有一个 SQL 数据库去储存他们的数据，但是那些储存庞大数据或者拥有很多访客甚至两者兼具的网站，就必须找到一个方法通过多个服务器去将数据分割开。</p></blockquote><h3 id="Request-handler"><a href="#Request-handler" class="headerlink" title="Request handler"></a>Request handler</h3><p>请求处理程序读取请求，以及请求的参数和 <code>cookie</code> 。随后它会读取并且有可能更新一些存储在服务端的数据。然后，程序会生成 HTML 响应</p><h2 id="7-The-server-sends-back-a-HTML-response"><a href="#7-The-server-sends-back-a-HTML-response" class="headerlink" title="7. The server sends back a HTML response"></a>7. The server sends back a HTML response</h2><p>服务器响应请求，返回 HTML 页面</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image10.png" alt="The server sends back a HTML response"></p><p>下面是服务端生成并返回的响应信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,</span><br><span class="line">    pre-check=0</span><br><span class="line">Expires: Sat, 01 Jan 2000 00:00:00 GMT</span><br><span class="line">P3P: CP=&quot;DSP LAW&quot;</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">X-Cnection: close</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Fri, 12 Feb 2010 09:05:55 GMT</span><br><span class="line"> </span><br><span class="line">2b3</span><br><span class="line">��������T�n�@����[...]</span><br></pre></td></tr></table></figure><p>响应信息数据大小为 36kb ，xxxxx</p><p>header 中字段 <code>Content-Encoding</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  </span></span><br><span class="line"><span class="meta">      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">id</span>=<span class="string">"facebook"</span> <span class="attr">class</span>=<span class="string">" no_js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-language"</span> <span class="attr">content</span>=<span class="string">"en"</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>除了压缩之外，header 头指定了是否缓存以及如何缓存这个页面，xxx cookie ，隐私信息，等等</p><blockquote><p>注意这里的 header 头中 <code>Content-Type</code> 被设置为 <code>text/html</code> 。header 告知浏览器将响应内容（response content）当做 HTML 渲染，而不是文件进行下载。浏览器将会通过 header 去决定如何解释相应信息，但是也会参考其他因素，比如 URL 扩展内容。</p></blockquote><h2 id="8-The-browser-begins-rendering-the-HTML"><a href="#8-The-browser-begins-rendering-the-HTML" class="headerlink" title="8. The browser begins rendering the HTML"></a>8. The browser begins rendering the HTML</h2><p>浏览器渲染 HTML 页面</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image6.png" alt="The browser begins rendering the HTML"></p><p>在浏览器接受全部的 HTML 文档信息之前，它就已经开始渲染网站了。</p><h2 id="9-The-browser-sends-requests-for-objects-embedded-in-HTML"><a href="#9-The-browser-sends-requests-for-objects-embedded-in-HTML" class="headerlink" title="9. The browser sends requests for objects embedded in HTML"></a>9. The browser sends requests for objects embedded in HTML</h2><p>浏览器请求静态资源，如 css 文件、图片、js 文件</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image11.png" alt="The browser sends requests for objects embedded in HTML"></p><h2 id="10-The-browser-sends-further-asynchronous-AJAX-requests"><a href="#10-The-browser-sends-further-asynchronous-AJAX-requests" class="headerlink" title="10. The browser sends further asynchronous (AJAX) requests"></a>10. The browser sends further asynchronous (AJAX) requests</h2><p>浏览器发送异步请求</p><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image12.png" alt="The browser sends further asynchronous (AJAX) requests"></p><p>在 Web 2.0 时代，即使在页面渲染完毕，客户端也还是同服务端保持通信。</p><p>例如，Facebook 聊天功能会保持更新你的朋友列表当他们进来或者离开。为了更新你的在记录中的朋友列表，你的浏览器中的 JavaScript 必须向服务端发送一个异步请求。这个异步请求时一个程序化构造的 GET 或者 POST 请求通过一个特殊的 URL。在 Facebook 这个例子中，客户端发送一个 <code>POST</code> 请求指向 <code>http://www.facebook.com/ajax/chat/buddy_list.php</code> ，它去获取一个关于你有哪些朋友在线的列表。</p><p>这个模式有时叫做 <code>AJAX</code> ，代表着 <code>Asynchronous JavaScript And XML</code>，但即使这样也没有一个特殊的理由要求服务端必须把响应格式化为 <code>XML</code> 格式。例如，Facebook 在异步请求响应中返回 JavaScript 代码段。</p><blockquote><p>通过 fiddler 可以查看浏览器发出的异步请求。事实上，你不仅可以被动地观察这些请求，你利用 fiddler 同样也可以修改和发送请求。</p></blockquote><blockquote><p>Facebook chat 提供了一个关于 <code>AJAX</code> 的有趣问题的一个例子：将数据从服务器推送到客户端。因为 <code>HTTP</code> 是一个请求-响应模式的协议，所以服务器不能向客户端发送新的消息。相反，客户端必须每隔几秒钟得到服务端的响应以便于查看是否有新的消息到达。</p><p>长轮询是一个有趣的技巧，它可以减少</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>关于 web 网站中各个部分如何协同工作，希望本文能对你有所启发。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/#&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;What really happens when you navigate to a URL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为方便理解，本文采用意译，如有兴趣，可阅读英文原文&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="http" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/http/"/>
    
    
      <category term="interview" scheme="https://wencaizhang.gitee.io/tags/interview/"/>
    
      <category term="http" scheme="https://wencaizhang.gitee.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>代码版本管理 —— Git 使用不完全指北</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/git/git-how-to-manage-code-version/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/git/git-how-to-manage-code-version/</id>
    <published>2018-05-21T07:53:00.000Z</published>
    <updated>2018-12-25T08:00:56.243Z</updated>
    
    <content type="html"><![CDATA[<p>代码由 git 托管，所以以下主要描述依托 git 进行版本管理的内容。</p><a id="more"></a><h2 id="一、git-最佳实践的理论基础"><a href="#一、git-最佳实践的理论基础" class="headerlink" title="一、git 最佳实践的理论基础"></a>一、git 最佳实践的理论基础</h2><ol><li><p>参照英文原版 <a href="http://nvie.com/posts/a-successful-git-branching-model/" rel="external nofollow noopener noreferrer" target="_blank">A successful Git branching model</a> 或者中文翻译 <a href="http://www.ituring.com.cn/article/56870" rel="external nofollow noopener noreferrer" target="_blank">基于git的源代码管理模型——git flow</a> 来理解整个版本管理的流程。</p></li><li><p>版本管理流程模型如下</p></li></ol><p><img src="http://nvie.com/img/git-model@2x.png" alt="git-model"></p><h2 id="二、具体开发中的应用场景说明"><a href="#二、具体开发中的应用场景说明" class="headerlink" title="二、具体开发中的应用场景说明"></a>二、具体开发中的应用场景说明</h2><ol><li><p>在正常开发状态（非版本发布状态）下， 代码库将仅存在两个分支 <code>master</code> 分支  和 <code>develop</code> 分支，开发人员将相关任务的 commit 提交至 <code>develop</code> 分支，每个 commit 提交需要在提交注释中附加相关修改说明以及 <code>JIRA中对应项目</code> 下相关的任务编号如”<code>SPMS-100</code>“。</p></li><li><p>在版本测试发布状态（sprint开发结束需要测试发布新的版本）下， 代码库将存在 <code>develop</code> 分支， <code>master</code> 分支以及 <code>release</code> 分支。其中 <code>release</code> 分支由 <code>develop</code> 分支代码派生，由将供测试人员部署在不同的测试环境进行测试，在测试中发现的缺陷，开发人员需在 <code>release</code> 分支中进行修复并合并回 <code>develop</code> 分支。</p></li><li><p>在版本发布上线状态（release分支通过测试）下， 代码库将存在 <code>develop</code> 分支， <code>master</code> 分支以及 <code>release</code> 分支。其中 <code>release</code> 分支需要合并回 <code>master</code> 分支和 <code>develop</code> 分支，并在 <code>master</code> 分支创建tag，然后将 <code>master</code> 分支发布至生产服务器，且删除 <code>release</code> 分支。</p></li><li><p>在版本发布上线观察维护状态（master分支发布至生产环境）下， 代码库将存在 <code>develop</code> 分支， <code>master</code> 分支。如果在线上发现有需要立即修复的缺陷，此时需要由 <code>master</code> 分支最新的一个tag中的代码派生出 <code>hotfix</code> 分支，在缺陷修复并且测试通过后，该 <code>hotfix</code> 分支将被合并回 <code>develop</code> 分支和 <code>master</code> 分支，并在 <code>master</code> 分支创建tag，然后将 <code>master</code> 分支发布至生产服务器，且删除 <code>hotfix</code> 分支。</p></li></ol><h2 id="三、分支说明"><a href="#三、分支说明" class="headerlink" title="三、分支说明"></a>三、分支说明</h2><ol><li><p><code>develop</code> 分支是保存当前最新开发成果的分支，用于提交相关完成开发任务的commit。</p></li><li><p><code>master</code> 分支存放的应该是随时可供在生产环境中部署的代码（Production Ready state），在每个sprint结束（或者hotfix结束）且相关的代码发布后将会被更新。每个稳定的发布版本需要在该分支创建一个tag，tag名称为对应的版本号，如1.0.0；每个hotfix的发布版本也需要在该分支创建一个tag，tag名称为对应的版本号，如1.0.1。</p></li><li><p><code>release</code> 分支是为发布新的产品版本而设计的，用于保存测试过程中可能出现的修复代码提交。</p></li><li><p><code>hotfix</code> 分支是为修复生产代码中的缺陷而设计的（非sprint），由<code>master</code> 分支最新的一个 tag 中的代码派生。</p></li><li><p><a href="http://www.ituring.com.cn/article/56870" rel="external nofollow noopener noreferrer" target="_blank">基于git的源代码管理模型——git flow</a> 中提到的 <code>features</code> 分支不提交保存到 git 服务器，由开发人员在本地进行操作，在此不再赘述。</p></li></ol><h2 id="四、一些链接"><a href="#四、一些链接" class="headerlink" title="四、一些链接"></a>四、一些链接</h2><h3 id="git操作参考"><a href="#git操作参考" class="headerlink" title="git操作参考"></a>git操作参考</h3><p>关于git，网上有很多内容，详略程度各有不同，下面列出几个比较简单的入门内容供参考</p><ul><li><p><a href="http://gitref.org/zh/" rel="external nofollow noopener noreferrer" target="_blank">git参考手册</a></p></li><li><p><a href="https://www.atlassian.com/git/" rel="external nofollow noopener noreferrer" target="_blank">Getting Git Right</a></p></li><li><p><a href="https://github.com/aseaday/git-style-guide" rel="external nofollow noopener noreferrer" target="_blank">Git 风格指南</a></p></li></ul><h3 id="git-flow参考文档"><a href="#git-flow参考文档" class="headerlink" title="git-flow参考文档"></a>git-flow参考文档</h3><ul><li><p><a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/" rel="external nofollow noopener noreferrer" target="_blank">Using git-flow to automate your git branching workflow</a></p></li><li><p><a href="https://github.com/danielkummer/git-flow-cheatsheet" rel="external nofollow noopener noreferrer" target="_blank">Git flow cheatsheet</a></p></li><li><p><a href="https://github.com/nvie/gitflow/wiki/Installation" rel="external nofollow noopener noreferrer" target="_blank">Git-flow Installation</a></p></li><li><p><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" rel="external nofollow noopener noreferrer" target="_blank">Git-flow 备忘清单</a></p></li><li><p><a href="http://www.ituring.com.cn/article/56870" rel="external nofollow noopener noreferrer" target="_blank">基于git的源代码管理模型——git flow</a></p></li></ul><h3 id="git小技巧"><a href="#git小技巧" class="headerlink" title="git小技巧"></a>git小技巧</h3><ul><li><p><a href="http://www.tonitech.com/2344.html" rel="external nofollow noopener noreferrer" target="_blank">git切换分支保存修改的代码的方法</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" rel="external nofollow noopener noreferrer" target="_blank">Git远程操作详解</a></p></li><li><p><a href="http://nvie.com/posts/a-successful-git-branching-model/" rel="external nofollow noopener noreferrer" target="_blank">A successful Git branching model</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码由 git 托管，所以以下主要描述依托 git 进行版本管理的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="git" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/git/"/>
    
    
      <category term="git" scheme="https://wencaizhang.gitee.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>代码版本管理 —— Git 使用不完全指北</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/git-how-to-manage-code-version/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/git-how-to-manage-code-version/</id>
    <published>2018-05-21T07:53:00.000Z</published>
    <updated>2018-12-25T08:00:53.482Z</updated>
    
    <content type="html"><![CDATA[<p>代码由 git 托管，所以以下主要描述依托 git 进行版本管理的内容。</p><a id="more"></a><h2 id="一、git-最佳实践的理论基础"><a href="#一、git-最佳实践的理论基础" class="headerlink" title="一、git 最佳实践的理论基础"></a>一、git 最佳实践的理论基础</h2><ol><li><p>参照英文原版 <a href="http://nvie.com/posts/a-successful-git-branching-model/" rel="external nofollow noopener noreferrer" target="_blank">A successful Git branching model</a> 或者中文翻译 <a href="http://www.ituring.com.cn/article/56870" rel="external nofollow noopener noreferrer" target="_blank">基于git的源代码管理模型——git flow</a> 来理解整个版本管理的流程。</p></li><li><p>版本管理流程模型如下</p></li></ol><p><img src="http://nvie.com/img/git-model@2x.png" alt="git-model"></p><h2 id="二、具体开发中的应用场景说明"><a href="#二、具体开发中的应用场景说明" class="headerlink" title="二、具体开发中的应用场景说明"></a>二、具体开发中的应用场景说明</h2><ol><li><p>在正常开发状态（非版本发布状态）下， 代码库将仅存在两个分支 <code>master</code> 分支  和 <code>develop</code> 分支，开发人员将相关任务的 commit 提交至 <code>develop</code> 分支，每个 commit 提交需要在提交注释中附加相关修改说明以及 <code>JIRA中对应项目</code> 下相关的任务编号如”<code>SPMS-100</code>“。</p></li><li><p>在版本测试发布状态（sprint开发结束需要测试发布新的版本）下， 代码库将存在 <code>develop</code> 分支， <code>master</code> 分支以及 <code>release</code> 分支。其中 <code>release</code> 分支由 <code>develop</code> 分支代码派生，由将供测试人员部署在不同的测试环境进行测试，在测试中发现的缺陷，开发人员需在 <code>release</code> 分支中进行修复并合并回 <code>develop</code> 分支。</p></li><li><p>在版本发布上线状态（release分支通过测试）下， 代码库将存在 <code>develop</code> 分支， <code>master</code> 分支以及 <code>release</code> 分支。其中 <code>release</code> 分支需要合并回 <code>master</code> 分支和 <code>develop</code> 分支，并在 <code>master</code> 分支创建tag，然后将 <code>master</code> 分支发布至生产服务器，且删除 <code>release</code> 分支。</p></li><li><p>在版本发布上线观察维护状态（master分支发布至生产环境）下， 代码库将存在 <code>develop</code> 分支， <code>master</code> 分支。如果在线上发现有需要立即修复的缺陷，此时需要由 <code>master</code> 分支最新的一个tag中的代码派生出 <code>hotfix</code> 分支，在缺陷修复并且测试通过后，该 <code>hotfix</code> 分支将被合并回 <code>develop</code> 分支和 <code>master</code> 分支，并在 <code>master</code> 分支创建tag，然后将 <code>master</code> 分支发布至生产服务器，且删除 <code>hotfix</code> 分支。</p></li></ol><h2 id="三、分支说明"><a href="#三、分支说明" class="headerlink" title="三、分支说明"></a>三、分支说明</h2><ol><li><p><code>develop</code> 分支是保存当前最新开发成果的分支，用于提交相关完成开发任务的commit。</p></li><li><p><code>master</code> 分支存放的应该是随时可供在生产环境中部署的代码（Production Ready state），在每个sprint结束（或者hotfix结束）且相关的代码发布后将会被更新。每个稳定的发布版本需要在该分支创建一个tag，tag名称为对应的版本号，如1.0.0；每个hotfix的发布版本也需要在该分支创建一个tag，tag名称为对应的版本号，如1.0.1。</p></li><li><p><code>release</code> 分支是为发布新的产品版本而设计的，用于保存测试过程中可能出现的修复代码提交。</p></li><li><p><code>hotfix</code> 分支是为修复生产代码中的缺陷而设计的（非sprint），由<code>master</code> 分支最新的一个 tag 中的代码派生。</p></li><li><p><a href="http://www.ituring.com.cn/article/56870" rel="external nofollow noopener noreferrer" target="_blank">基于git的源代码管理模型——git flow</a> 中提到的 <code>features</code> 分支不提交保存到 git 服务器，由开发人员在本地进行操作，在此不再赘述。</p></li></ol><h2 id="四、一些链接"><a href="#四、一些链接" class="headerlink" title="四、一些链接"></a>四、一些链接</h2><h3 id="git操作参考"><a href="#git操作参考" class="headerlink" title="git操作参考"></a>git操作参考</h3><p>关于git，网上有很多内容，详略程度各有不同，下面列出几个比较简单的入门内容供参考</p><ul><li><p><a href="http://gitref.org/zh/" rel="external nofollow noopener noreferrer" target="_blank">git参考手册</a></p></li><li><p><a href="https://www.atlassian.com/git/" rel="external nofollow noopener noreferrer" target="_blank">Getting Git Right</a></p></li><li><p><a href="https://github.com/aseaday/git-style-guide" rel="external nofollow noopener noreferrer" target="_blank">Git 风格指南</a></p></li></ul><h3 id="git-flow参考文档"><a href="#git-flow参考文档" class="headerlink" title="git-flow参考文档"></a>git-flow参考文档</h3><ul><li><p><a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/" rel="external nofollow noopener noreferrer" target="_blank">Using git-flow to automate your git branching workflow</a></p></li><li><p><a href="https://github.com/danielkummer/git-flow-cheatsheet" rel="external nofollow noopener noreferrer" target="_blank">Git flow cheatsheet</a></p></li><li><p><a href="https://github.com/nvie/gitflow/wiki/Installation" rel="external nofollow noopener noreferrer" target="_blank">Git-flow Installation</a></p></li><li><p><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" rel="external nofollow noopener noreferrer" target="_blank">Git-flow 备忘清单</a></p></li><li><p><a href="http://www.ituring.com.cn/article/56870" rel="external nofollow noopener noreferrer" target="_blank">基于git的源代码管理模型——git flow</a></p></li></ul><h3 id="git小技巧"><a href="#git小技巧" class="headerlink" title="git小技巧"></a>git小技巧</h3><ul><li><p><a href="http://www.tonitech.com/2344.html" rel="external nofollow noopener noreferrer" target="_blank">git切换分支保存修改的代码的方法</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" rel="external nofollow noopener noreferrer" target="_blank">Git远程操作详解</a></p></li><li><p><a href="http://nvie.com/posts/a-successful-git-branching-model/" rel="external nofollow noopener noreferrer" target="_blank">A successful Git branching model</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码由 git 托管，所以以下主要描述依托 git 进行版本管理的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="todoxxx" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/todoxxx/"/>
    
    
      <category term="git" scheme="https://wencaizhang.gitee.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo 基本使用备忘</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/blog/hexo-basic-usage/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/blog/hexo-basic-usage/</id>
    <published>2018-05-18T12:35:00.000Z</published>
    <updated>2018-12-25T08:02:06.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>全局安装 hexo 脚手架：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>在 <code>blog</code> 目录下新建一个网站，然后安装 <code>npm</code> 依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>生成静态网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li><li><p>启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>新建一篇文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h2><p>在 <code>package.json</code> 中自定义 <code>npm scripts</code> 脚本：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s",</span><br><span class="line">"build": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://hexo.io/zh-cn/docs/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="blog" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/blog/"/>
    
    
      <category term="hexo" scheme="https://wencaizhang.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo 基本使用备忘</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/hexo-basic-usage/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/hexo-basic-usage/</id>
    <published>2018-05-18T12:35:00.000Z</published>
    <updated>2018-12-25T08:02:11.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>全局安装 hexo 脚手架：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>在 <code>blog</code> 目录下新建一个网站，然后安装 <code>npm</code> 依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>生成静态网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li><li><p>启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>新建一篇文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h2><p>在 <code>package.json</code> 中自定义 <code>npm scripts</code> 脚本：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s",</span><br><span class="line">"build": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://hexo.io/zh-cn/docs/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="todoxxx" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/todoxxx/"/>
    
    
      <category term="hexo" scheme="https://wencaizhang.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-admin: hexo博客的后台管理工具</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/blog/hexo-admin-hexo-background-manage-tool/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/blog/hexo-admin-hexo-background-manage-tool/</id>
    <published>2018-05-18T10:01:00.000Z</published>
    <updated>2018-12-25T08:00:32.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>Hexo 生成静态网站，我们可以很灵活的将其部署在 GitHub Pages 上或者是随便一个静态服务器上。</p><p>但随之带来的一个问题就是无法像 wordpress 一样提供一个后台管理界面。hexo-admin 很好的解决了这一痛点需求。</p><a id="more"></a><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-安装-hexo-并创建-blog"><a href="#1-安装-hexo-并创建-blog" class="headerlink" title="1. 安装 hexo 并创建 blog"></a>1. 安装 hexo 并创建 blog</h3><p><em>如已创建则跳过此步骤</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="2-安装-hexo-admin-并启动服务"><a href="#2-安装-hexo-admin-并启动服务" class="headerlink" title="2. 安装 hexo-admin 并启动服务"></a>2. 安装 hexo-admin 并启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br></pre></td></tr></table></figure><p>hexo-admin 管理界面路径为 <code>博客预览地址</code> + <code>admin</code>，即如果你的博客预览地址为 <code>http://localhost:4000/</code> ，则 hexo-admin 管理界面路径为 <code>http://localhost:4000/admin/</code></p><h2 id="二、启用密码保护"><a href="#二、启用密码保护" class="headerlink" title="二、启用密码保护"></a>二、启用密码保护</h2><p>启动 hexo 预览服务之后，进入 <code>http://localhost:4000/admin/</code> 即可直接对博客文章进行修改，也就是说如果你的博客安装在静态服务器上，则别人也有可能通过这个地址，对你的博客进行修改，为了避免这一情况，可以启动密码保护服务。步骤如下：</p><ol><li><p>启动 hexo 服务，打开 hexo-admin 界面，找到  <code>Settings &gt; Setup authentification</code>，如图所示：</p><p> <img src="http://p2btijoky.bkt.clouddn.com/18-5-18/41667201.jpg" alt=""></p></li><li><p>点击进入设置页面，在页面中分别填写 <code>Username</code>, <code>Password</code> 和 <code>Secret</code>，填写完成之后，页面下方会生成一段配置代码。配置代码示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-admin authentification</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">  password_hash:</span> <span class="string">$2a$10$sTyd76sSKai3FGnSYgi4cO6ibhFaJDMbTXx3dja7SRPh1m1hXN8za</span></span><br><span class="line"><span class="attr">  secret:</span> <span class="string">secret</span></span><br></pre></td></tr></table></figure></li><li><p>将这段代码复制到根目录配置文件 <code>_config.yml</code> 中，然后重启 hexo 服务，再次进入 hexo-admin 界面时就需要使用前面设置的用户名和密码进行登录了。</p><p> <img src="http://p2btijoky.bkt.clouddn.com/18-5-18/32546895.jpg" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、前言&quot;&gt;&lt;a href=&quot;#零、前言&quot; class=&quot;headerlink&quot; title=&quot;零、前言&quot;&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hexo 生成静态网站，我们可以很灵活的将其部署在 GitHub Pages 上或者是随便一个静态服务器上。&lt;/p&gt;
&lt;p&gt;但随之带来的一个问题就是无法像 wordpress 一样提供一个后台管理界面。hexo-admin 很好的解决了这一痛点需求。&lt;/p&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="blog" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/blog/"/>
    
    
      <category term="hexo" scheme="https://wencaizhang.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-admin: hexo博客的后台管理工具</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/hexo-admin-hexo-background-manage-tool/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/todoxxx/hexo-admin-hexo-background-manage-tool/</id>
    <published>2018-05-18T10:01:00.000Z</published>
    <updated>2018-12-25T08:00:03.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>Hexo 生成静态网站，我们可以很灵活的将其部署在 GitHub Pages 上或者是随便一个静态服务器上。</p><p>但随之带来的一个问题就是无法像 wordpress 一样提供一个后台管理界面。hexo-admin 很好的解决了这一痛点需求。</p><a id="more"></a><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-安装-hexo-并创建-blog"><a href="#1-安装-hexo-并创建-blog" class="headerlink" title="1. 安装 hexo 并创建 blog"></a>1. 安装 hexo 并创建 blog</h3><p><em>如已创建则跳过此步骤</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="2-安装-hexo-admin-并启动服务"><a href="#2-安装-hexo-admin-并启动服务" class="headerlink" title="2. 安装 hexo-admin 并启动服务"></a>2. 安装 hexo-admin 并启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br></pre></td></tr></table></figure><p>hexo-admin 管理界面路径为 <code>博客预览地址</code> + <code>admin</code>，即如果你的博客预览地址为 <code>http://localhost:4000/</code> ，则 hexo-admin 管理界面路径为 <code>http://localhost:4000/admin/</code></p><h2 id="二、启用密码保护"><a href="#二、启用密码保护" class="headerlink" title="二、启用密码保护"></a>二、启用密码保护</h2><p>启动 hexo 预览服务之后，进入 <code>http://localhost:4000/admin/</code> 即可直接对博客文章进行修改，也就是说如果你的博客安装在静态服务器上，则别人也有可能通过这个地址，对你的博客进行修改，为了避免这一情况，可以启动密码保护服务。步骤如下：</p><ol><li><p>启动 hexo 服务，打开 hexo-admin 界面，找到  <code>Settings &gt; Setup authentification</code>，如图所示：</p><p> <img src="http://p2btijoky.bkt.clouddn.com/18-5-18/41667201.jpg" alt=""></p></li><li><p>点击进入设置页面，在页面中分别填写 <code>Username</code>, <code>Password</code> 和 <code>Secret</code>，填写完成之后，页面下方会生成一段配置代码。配置代码示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-admin authentification</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">  password_hash:</span> <span class="string">$2a$10$sTyd76sSKai3FGnSYgi4cO6ibhFaJDMbTXx3dja7SRPh1m1hXN8za</span></span><br><span class="line"><span class="attr">  secret:</span> <span class="string">secret</span></span><br></pre></td></tr></table></figure></li><li><p>将这段代码复制到根目录配置文件 <code>_config.yml</code> 中，然后重启 hexo 服务，再次进入 hexo-admin 界面时就需要使用前面设置的用户名和密码进行登录了。</p><p> <img src="http://p2btijoky.bkt.clouddn.com/18-5-18/32546895.jpg" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、前言&quot;&gt;&lt;a href=&quot;#零、前言&quot; class=&quot;headerlink&quot; title=&quot;零、前言&quot;&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hexo 生成静态网站，我们可以很灵活的将其部署在 GitHub Pages 上或者是随便一个静态服务器上。&lt;/p&gt;
&lt;p&gt;但随之带来的一个问题就是无法像 wordpress 一样提供一个后台管理界面。hexo-admin 很好的解决了这一痛点需求。&lt;/p&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="todoxxx" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/todoxxx/"/>
    
    
      <category term="hexo" scheme="https://wencaizhang.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 序列化与反序列化</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/js/serialize-and-unserialize-of-javascript/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/js/serialize-and-unserialize-of-javascript/</id>
    <published>2018-03-02T02:51:00.000Z</published>
    <updated>2018-12-25T07:48:43.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-param"><a href="#一、-param" class="headerlink" title="一、$.param()"></a>一、$.param()</h2><p><code>param()</code> 方法创建数组或对象的序列化表示。该序列化值可在进行 AJAX 请求时在 URL 查询字符串中使用。</p><a id="more"></a><h3 id="1-使用示例"><a href="#1-使用示例" class="headerlink" title="1. 使用示例"></a>1. 使用示例</h3><p>示例一：序列化目标是对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经引入 jquery.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">username</span>: <span class="string">'zwc'</span> , <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> querystring = $.param(obj);</span><br><span class="line"><span class="built_in">console</span>.log(querystring);</span><br><span class="line"><span class="comment">// "username=zwc&amp;age=18"</span></span><br></pre></td></tr></table></figure><p>示例二：序列化目标数据结构深层嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经引入 jquery.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    one: <span class="number">1</span>, </span><br><span class="line">    two: <span class="number">2</span>, </span><br><span class="line">    three: <span class="number">3</span></span><br><span class="line">  &#125;, </span><br><span class="line">  b: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> recursiveEncoded = $.param(myObject);</span><br><span class="line"><span class="keyword">var</span> recursiveDecoded = <span class="built_in">decodeURIComponent</span>($.param(myObject));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveEncoded);</span><br><span class="line"><span class="comment">// "a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveDecoded);</span><br><span class="line"><span class="comment">// "a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3"</span></span><br></pre></td></tr></table></figure><p>示例三：序列化目标是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经引入 jquery.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'username'</span>, <span class="attr">value</span>: <span class="string">'zwc'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'age'</span>, <span class="attr">value</span>: <span class="number">18</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> querystring = $.param(arr);</span><br><span class="line"><span class="built_in">console</span>.log(querystring);</span><br><span class="line"><span class="comment">// "username=zwc&amp;age=18"</span></span><br></pre></td></tr></table></figure><h3 id="2-模拟-param"><a href="#2-模拟-param" class="headerlink" title="2. 模拟 $.param()"></a>2. 模拟 $.param()</h3><p>根据 <a href="#1-使用示例">使用示例</a> 模拟出代码的实现过程。暂时先不考虑边界值，即方法调用时传入的都是合法参数（参照示例中的参数）。</p><h4 id="i-第一版"><a href="#i-第一版" class="headerlink" title="i 第一版"></a>i 第一版</h4><p>针对 <a href="#1-使用示例">使用示例</a> 中<strong>示例一</strong>进行模拟</p><p>// 方法定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                str += key + <span class="string">'='</span> + target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">username</span>: <span class="string">'zwc'</span> , <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> querystring = param(obj);</span><br><span class="line"><span class="built_in">console</span>.log(querystring);</span><br><span class="line"><span class="comment">// "username=zwcage=18"</span></span><br></pre></td></tr></table></figure></p><h4 id="ii-第二版"><a href="#ii-第二版" class="headerlink" title="ii 第二版"></a>ii 第二版</h4><p>针对 <a href="#1-使用示例">使用示例</a> 中<strong>示例一</strong>进行模拟</p><p>// 方法定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> tmp = target[key];</span><br><span class="line">                    <span class="keyword">for</span> (k <span class="keyword">in</span> tmp) &#123;</span><br><span class="line">                        str += key + <span class="string">'['</span> + k +<span class="string">']='</span> + tmp[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> tmp = target[key];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">                        str += key + <span class="string">'[]='</span> + tmp[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    str += key + <span class="string">'='</span> + target[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="iii-第三版"><a href="#iii-第三版" class="headerlink" title="iii 第三版"></a>iii 第三版</h4><p>这一次把更复杂的情况考虑进去，也就是递归。</p><p>// 方法定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = target[key];</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Object</span> || value <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                paramObj(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">'&amp;'</span> + key + <span class="string">'='</span> + value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">paramObj</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (k <span class="keyword">in</span> value) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = value[k];</span><br><span class="line">            <span class="keyword">var</span> tempKey = value <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? key + <span class="string">'['</span> + k +<span class="string">']'</span> : key + <span class="string">'[]'</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp <span class="keyword">instanceof</span> <span class="built_in">Object</span> || temp <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                paramObj(tempKey, temp)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">'&amp;'</span> + tempKey + <span class="string">'='</span> + temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(str.slice(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    one: <span class="number">1</span>, </span><br><span class="line">    two: <span class="number">2</span>, </span><br><span class="line">    three: &#123; <span class="attr">name</span>: <span class="string">'jack'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  b: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> recursiveEncoded = param(myObject);</span><br><span class="line"><span class="keyword">var</span> recursiveDecoded = <span class="built_in">decodeURIComponent</span>(param(myObject));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveEncoded);</span><br><span class="line"><span class="comment">// a%5Bone%5D%3D1%26a%5Btwo%5D%3D2%26a%5Bthree%5D%5Bname%5D%3Djack%26a%5Bthree%5D%5Bage%5D%3D18%26b%5B0%5D%3D1%26b%5B1%5D%3D2%26b%5B2%5D%3D3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveDecoded);</span><br><span class="line"><span class="comment">// "a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3"</span></span><br></pre></td></tr></table></figure></p><h2 id="二、-serializeArray"><a href="#二、-serializeArray" class="headerlink" title="二、$.serializeArray()"></a>二、$.serializeArray()</h2><h2 id="三、-serialize"><a href="#三、-serialize" class="headerlink" title="三、$.serialize()"></a>三、$.serialize()</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-param&quot;&gt;&lt;a href=&quot;#一、-param&quot; class=&quot;headerlink&quot; title=&quot;一、$.param()&quot;&gt;&lt;/a&gt;一、$.param()&lt;/h2&gt;&lt;p&gt;&lt;code&gt;param()&lt;/code&gt; 方法创建数组或对象的序列化表示。该序列化值可在进行 AJAX 请求时在 URL 查询字符串中使用。&lt;/p&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="js" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/"/>
    
    
      <category term="javascript" scheme="https://wencaizhang.gitee.io/tags/javascript/"/>
    
      <category term="jQuery" scheme="https://wencaizhang.gitee.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 序列化与反序列化</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/js/old/serialize-and-unserialize-of-javascript/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/js/old/serialize-and-unserialize-of-javascript/</id>
    <published>2018-03-02T02:51:00.000Z</published>
    <updated>2018-12-25T07:48:43.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-param"><a href="#一、-param" class="headerlink" title="一、$.param()"></a>一、$.param()</h2><p><code>param()</code> 方法创建数组或对象的序列化表示。该序列化值可在进行 AJAX 请求时在 URL 查询字符串中使用。</p><a id="more"></a><h3 id="1-使用示例"><a href="#1-使用示例" class="headerlink" title="1. 使用示例"></a>1. 使用示例</h3><p>示例一：序列化目标是对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经引入 jquery.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">username</span>: <span class="string">'zwc'</span> , <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> querystring = $.param(obj);</span><br><span class="line"><span class="built_in">console</span>.log(querystring);</span><br><span class="line"><span class="comment">// "username=zwc&amp;age=18"</span></span><br></pre></td></tr></table></figure><p>示例二：序列化目标数据结构深层嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经引入 jquery.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    one: <span class="number">1</span>, </span><br><span class="line">    two: <span class="number">2</span>, </span><br><span class="line">    three: <span class="number">3</span></span><br><span class="line">  &#125;, </span><br><span class="line">  b: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> recursiveEncoded = $.param(myObject);</span><br><span class="line"><span class="keyword">var</span> recursiveDecoded = <span class="built_in">decodeURIComponent</span>($.param(myObject));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveEncoded);</span><br><span class="line"><span class="comment">// "a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveDecoded);</span><br><span class="line"><span class="comment">// "a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3"</span></span><br></pre></td></tr></table></figure><p>示例三：序列化目标是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经引入 jquery.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'username'</span>, <span class="attr">value</span>: <span class="string">'zwc'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'age'</span>, <span class="attr">value</span>: <span class="number">18</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> querystring = $.param(arr);</span><br><span class="line"><span class="built_in">console</span>.log(querystring);</span><br><span class="line"><span class="comment">// "username=zwc&amp;age=18"</span></span><br></pre></td></tr></table></figure><h3 id="2-模拟-param"><a href="#2-模拟-param" class="headerlink" title="2. 模拟 $.param()"></a>2. 模拟 $.param()</h3><p>根据 <a href="#1-使用示例">使用示例</a> 模拟出代码的实现过程。暂时先不考虑边界值，即方法调用时传入的都是合法参数（参照示例中的参数）。</p><h4 id="i-第一版"><a href="#i-第一版" class="headerlink" title="i 第一版"></a>i 第一版</h4><p>针对 <a href="#1-使用示例">使用示例</a> 中<strong>示例一</strong>进行模拟</p><p>// 方法定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                str += key + <span class="string">'='</span> + target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">username</span>: <span class="string">'zwc'</span> , <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> querystring = param(obj);</span><br><span class="line"><span class="built_in">console</span>.log(querystring);</span><br><span class="line"><span class="comment">// "username=zwcage=18"</span></span><br></pre></td></tr></table></figure></p><h4 id="ii-第二版"><a href="#ii-第二版" class="headerlink" title="ii 第二版"></a>ii 第二版</h4><p>针对 <a href="#1-使用示例">使用示例</a> 中<strong>示例一</strong>进行模拟</p><p>// 方法定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> tmp = target[key];</span><br><span class="line">                    <span class="keyword">for</span> (k <span class="keyword">in</span> tmp) &#123;</span><br><span class="line">                        str += key + <span class="string">'['</span> + k +<span class="string">']='</span> + tmp[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> tmp = target[key];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">                        str += key + <span class="string">'[]='</span> + tmp[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    str += key + <span class="string">'='</span> + target[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="iii-第三版"><a href="#iii-第三版" class="headerlink" title="iii 第三版"></a>iii 第三版</h4><p>这一次把更复杂的情况考虑进去，也就是递归。</p><p>// 方法定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = target[key];</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Object</span> || value <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                paramObj(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">'&amp;'</span> + key + <span class="string">'='</span> + value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">paramObj</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (k <span class="keyword">in</span> value) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = value[k];</span><br><span class="line">            <span class="keyword">var</span> tempKey = value <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? key + <span class="string">'['</span> + k +<span class="string">']'</span> : key + <span class="string">'[]'</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp <span class="keyword">instanceof</span> <span class="built_in">Object</span> || temp <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                paramObj(tempKey, temp)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">'&amp;'</span> + tempKey + <span class="string">'='</span> + temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(str.slice(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    one: <span class="number">1</span>, </span><br><span class="line">    two: <span class="number">2</span>, </span><br><span class="line">    three: &#123; <span class="attr">name</span>: <span class="string">'jack'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  b: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> recursiveEncoded = param(myObject);</span><br><span class="line"><span class="keyword">var</span> recursiveDecoded = <span class="built_in">decodeURIComponent</span>(param(myObject));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveEncoded);</span><br><span class="line"><span class="comment">// a%5Bone%5D%3D1%26a%5Btwo%5D%3D2%26a%5Bthree%5D%5Bname%5D%3Djack%26a%5Bthree%5D%5Bage%5D%3D18%26b%5B0%5D%3D1%26b%5B1%5D%3D2%26b%5B2%5D%3D3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursiveDecoded);</span><br><span class="line"><span class="comment">// "a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3"</span></span><br></pre></td></tr></table></figure></p><h2 id="二、-serializeArray"><a href="#二、-serializeArray" class="headerlink" title="二、$.serializeArray()"></a>二、$.serializeArray()</h2><h2 id="三、-serialize"><a href="#三、-serialize" class="headerlink" title="三、$.serialize()"></a>三、$.serialize()</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-param&quot;&gt;&lt;a href=&quot;#一、-param&quot; class=&quot;headerlink&quot; title=&quot;一、$.param()&quot;&gt;&lt;/a&gt;一、$.param()&lt;/h2&gt;&lt;p&gt;&lt;code&gt;param()&lt;/code&gt; 方法创建数组或对象的序列化表示。该序列化值可在进行 AJAX 请求时在 URL 查询字符串中使用。&lt;/p&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="js" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/"/>
    
      <category term="old" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/js/old/"/>
    
    
      <category term="javascript" scheme="https://wencaizhang.gitee.io/tags/javascript/"/>
    
      <category term="jQuery" scheme="https://wencaizhang.gitee.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>调教你的Xshell</title>
    <link href="https://wencaizhang.gitee.io/wiki/oh-my-article/tool/config-your-xshell/"/>
    <id>https://wencaizhang.gitee.io/wiki/oh-my-article/tool/config-your-xshell/</id>
    <published>2018-01-17T15:05:00.000Z</published>
    <updated>2018-12-25T07:48:43.473Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h3><p>xshell是一款知名终端模拟软件，个人用户免费，中文界面，方便好用。</p><p>但是一些默认设置需要手动调整之后才更顺手更好用。</p><a id="more"></a><h3 id="打开选项窗口"><a href="#打开选项窗口" class="headerlink" title="打开选项窗口"></a>打开选项窗口</h3><p>如图所示：工具 -&gt; 选项即可打开选项窗口<br><img src="http://p2btijoky.bkt.clouddn.com/18-1-17/39941105.jpg" alt=""></p><h3 id="将选中的文本自动复制到剪贴板（左键选中自动复制）"><a href="#将选中的文本自动复制到剪贴板（左键选中自动复制）" class="headerlink" title="将选中的文本自动复制到剪贴板（左键选中自动复制）"></a>将选中的文本自动复制到剪贴板（左键选中自动复制）</h3><p>如图所示，在“键盘和鼠标”选项卡中勾选对应选项即可：<br><img src="http://p2btijoky.bkt.clouddn.com/18-1-17/65171353.jpg" alt=""></p><h3 id="右键设置"><a href="#右键设置" class="headerlink" title="右键设置"></a>右键设置</h3><p>如图所示，设置右键和中键的功能，其中下拉选项的含义如下：</p><table><thead><tr><th>选项</th><th style="text-align:center">蹩脚翻译</th></tr></thead><tbody><tr><td>Do nothing</td><td style="text-align:center">什么都不做</td></tr><tr><td>Open the popup menu</td><td style="text-align:center">打开弹出式菜单</td></tr><tr><td>Paste the clipboard contents</td><td style="text-align:center">粘贴剪切板的内容</td></tr><tr><td>Open Properties dialog</td><td style="text-align:center">打开属性窗口</td></tr><tr><td>Send carriage return</td><td style="text-align:center">发送回车</td></tr><tr><td>Paste the selected text</td><td style="text-align:center">粘贴被选中的文本</td></tr></tbody></table><p><img src="http://p2btijoky.bkt.clouddn.com/18-1-17/7123508.jpg" alt=""></p><p>我的选择是，中键打开弹出式菜单，右键粘贴剪切板的内容</p><h3 id="Ctrl-C-复制"><a href="#Ctrl-C-复制" class="headerlink" title="Ctrl + C 复制"></a><code>Ctrl + C</code> 复制</h3><p><code>Ctrl + C</code> 常用于结束正在进行中的命令，另外<br>在设置了左键选中自动复制之后，也就不需要再额外设置复制的快捷键了。</p><h3 id="Ctrl-V-粘贴"><a href="#Ctrl-V-粘贴" class="headerlink" title="Ctrl + V 粘贴"></a><code>Ctrl + V</code> 粘贴</h3><ol><li><p>键盘和鼠标选项卡 -&gt; 编辑按钮<br><img src="http://p2btijoky.bkt.clouddn.com/18-1-17/13626882.jpg" alt=""></p></li><li><p>新建按钮<br><img src="http://p2btijoky.bkt.clouddn.com/18-1-17/94066364.jpg" alt=""></p></li><li><p>同时按下 <code>Ctrl</code> 和 <code>V</code> 会自动进入编辑面板<br><img src="http://p2btijoky.bkt.clouddn.com/18-1-17/89009725.jpg" alt=""></p></li><li><p><code>类型</code> 选择<code>菜单</code>，操作选择 <code>[编辑] 粘贴</code><br><img src="http://p2btijoky.bkt.clouddn.com/18-1-17/45371351.jpg" alt=""></p></li><li><p>最后点击确定即可</p></li></ol><h3 id="设置字体大小和配色方案"><a href="#设置字体大小和配色方案" class="headerlink" title="设置字体大小和配色方案"></a>设置字体大小和配色方案</h3><ol><li><p>文件 -&gt; 属性，或者使用快捷键 <code>Alt + P</code> 打开属性窗口<br><img src="http://p2btijoky.bkt.clouddn.com/18-1-18/76087715.jpg" alt=""></p></li><li><p>点击左测外观，然后在右侧进行设置<br><img src="http://p2btijoky.bkt.clouddn.com/18-1-18/72432945.jpg" alt=""></p></li><li><p>最后点击确定即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Xshell&quot;&gt;&lt;a href=&quot;#Xshell&quot; class=&quot;headerlink&quot; title=&quot;Xshell&quot;&gt;&lt;/a&gt;Xshell&lt;/h3&gt;&lt;p&gt;xshell是一款知名终端模拟软件，个人用户免费，中文界面，方便好用。&lt;/p&gt;
&lt;p&gt;但是一些默认设置需要手动调整之后才更顺手更好用。&lt;/p&gt;
    
    </summary>
    
      <category term="oh-my-article" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/"/>
    
      <category term="tool" scheme="https://wencaizhang.gitee.io/categories/oh-my-article/tool/"/>
    
    
      <category term="linux" scheme="https://wencaizhang.gitee.io/tags/linux/"/>
    
      <category term="tool" scheme="https://wencaizhang.gitee.io/tags/tool/"/>
    
      <category term="xshell" scheme="https://wencaizhang.gitee.io/tags/xshell/"/>
    
  </entry>
  
</feed>
